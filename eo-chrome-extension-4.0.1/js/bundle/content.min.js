/******/ (function(modules) {
    /******/
    /******/ 	var installedModules = {};
    /******/
    /******/
    /******/ 	function __webpack_require__(moduleId) {
        /******/
        /******/
        /******/ 		if(installedModules[moduleId]) {
            /******/ 			return installedModules[moduleId].exports;
            /******/ 		}
        /******/
        /******/ 		var module = installedModules[moduleId] = {
            /******/ 			i: moduleId,
            /******/ 			l: false,
            /******/ 			exports: {}
            /******/ 		};
        /******/
        /******/
        /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/
        /******/ 		module.l = true;
        /******/
        /******/
        /******/ 		return module.exports;
        /******/ 	}
    /******/
    /******/
    /******/
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
        /******/ 		if(!__webpack_require__.o(exports, name)) {
            /******/ 			Object.defineProperty(exports, name, {
                /******/ 				configurable: false,
                /******/ 				enumerable: true,
                /******/ 				get: getter
                /******/ 			});
            /******/ 		}
        /******/ 	};
    /******/
    /******/
    /******/ 	__webpack_require__.n = function(module) {
        /******/ 		var getter = module && module.__esModule ?
            /******/ 			function getDefault() { return module['default']; } :
            /******/ 			function getModuleExports() { return module; };
        /******/ 		__webpack_require__.d(getter, 'a', getter);
        /******/ 		return getter;
        /******/ 	};
    /******/
    /******/
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/
    /******/ 	return __webpack_require__(__webpack_require__.s = 131);
    /******/ })
/************************************************************************/
/******/ ([
    /* 0 */
    /***/ (function(module, exports) {

        var core = module.exports = { version: '2.5.7' };
        if (typeof __e == 'number') __e = core;


        /***/ }),
    /* 1 */
    /***/ (function(module, exports) {


        var global = module.exports = typeof window != 'undefined' && window.Math == Math
            ? window : typeof self != 'undefined' && self.Math == Math ? self

                : Function('return this')();
        if (typeof __g == 'number') __g = global;


        /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {

        var store = __webpack_require__(35)('wks');
        var uid = __webpack_require__(24);
        var Symbol = __webpack_require__(1).Symbol;
        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
            return store[name] || (store[name] =
                USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;


        /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(5);
        module.exports = function (it) {
            if (!isObject(it)) throw TypeError(it + ' is not an object!');
            return it;
        };


        /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__(1);
        var core = __webpack_require__(0);
        var ctx = __webpack_require__(21);
        var hide = __webpack_require__(7);
        var has = __webpack_require__(10);
        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var IS_WRAP = type & $export.W;
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE];
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
            var key, own, out;
            if (IS_GLOBAL) source = name;
            for (key in source) {

                own = !IS_FORCED && target && target[key] !== undefined;
                if (own && has(exports, key)) continue;

                out = own ? target[key] : source[key];

                exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]

                    : IS_BIND && own ? ctx(out, global)

                        : IS_WRAP && target[key] == out ? (function (C) {
                            var F = function (a, b, c) {
                                if (this instanceof C) {
                                    switch (arguments.length) {
                                        case 0: return new C();
                                        case 1: return new C(a);
                                        case 2: return new C(a, b);
                                    } return new C(a, b, c);
                                } return C.apply(this, arguments);
                            };
                            F[PROTOTYPE] = C[PROTOTYPE];
                            return F;

                        })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

                if (IS_PROTO) {
                    (exports.virtual || (exports.virtual = {}))[key] = out;

                    if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
                }
            }
        };

        $export.F = 1;
        $export.G = 2;
        $export.S = 4;
        $export.P = 8;
        $export.B = 16;
        $export.W = 32;
        $export.U = 64;
        $export.R = 128;
        module.exports = $export;


        /***/ }),
    /* 5 */
    /***/ (function(module, exports) {

        module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
        };


        /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {


        var IObject = __webpack_require__(46);
        var defined = __webpack_require__(30);
        module.exports = function (it) {
            return IObject(defined(it));
        };


        /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {

        var dP = __webpack_require__(8);
        var createDesc = __webpack_require__(23);
        module.exports = __webpack_require__(9) ? function (object, key, value) {
            return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
            object[key] = value;
            return object;
        };


        /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__(3);
        var IE8_DOM_DEFINE = __webpack_require__(48);
        var toPrimitive = __webpack_require__(32);
        var dP = Object.defineProperty;

        exports.f = __webpack_require__(9) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
            } catch (e) { /* empty */ }
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
        };


        /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {


        module.exports = !__webpack_require__(12)(function () {
            return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
        });


        /***/ }),
    /* 10 */
    /***/ (function(module, exports) {

        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function (it, key) {
            return hasOwnProperty.call(it, key);
        };


        /***/ }),
    /* 11 */
    /***/ (function(module, exports) {

        module.exports = {};


        /***/ }),
    /* 12 */
    /***/ (function(module, exports) {

        module.exports = function (exec) {
            try {
                return !!exec();
            } catch (e) {
                return true;
            }
        };


        /***/ }),
    /* 13 */
    /***/ (function(module, exports, __webpack_require__) {


        var $keys = __webpack_require__(51);
        var enumBugKeys = __webpack_require__(36);

        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
        };


        /***/ }),
    /* 14 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(66), __esModule: true };

        /***/ }),
    /* 15 */
    /***/ (function(module, exports) {

        var toString = {}.toString;

        module.exports = function (it) {
            return toString.call(it).slice(8, -1);
        };


        /***/ }),
    /* 16 */
    /***/ (function(module, exports) {

        module.exports = true;


        /***/ }),
    /* 17 */
    /***/ (function(module, exports) {

        exports.f = {}.propertyIsEnumerable;


        /***/ }),
    /* 18 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(85), __esModule: true };

        /***/ }),
    /* 19 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.COMMON_FILE = exports.COMMON_TOOLS = undefined;

        var _getIterator2 = __webpack_require__(14);

        var _getIterator3 = _interopRequireDefault(_getIterator2);

        var _slicedToArray2 = __webpack_require__(27);

        var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

        var _entries = __webpack_require__(28);

        var _entries2 = _interopRequireDefault(_entries);

        var _stringify = __webpack_require__(18);

        var _stringify2 = _interopRequireDefault(_stringify);

        var _typeof2 = __webpack_require__(29);

        var _typeof3 = _interopRequireDefault(_typeof2);

        var _requestUtils = __webpack_require__(42);

        var _constant = __webpack_require__(97);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }



        function getFile(fileName, fileUrl) {
            var oReq = new XMLHttpRequest();
            var blob = new Blob();
            oReq.open("get", fileUrl, true);
            oReq.onload = reqListener;
            oReq.responseType = "blob";
            oReq.send();

            function reqListener() {
                blob = this.response;
                var fileArray = {
                    png: {
                        name: 'img_png.png'
                    },
                    jpg: {
                        name: 'img_jpg.jpg'
                    },
                    gif: {
                        name: 'img_gif.gif'
                    },
                    txt: {
                        name: 'file_txt.txt'
                    },
                    pdf: {
                        name: 'pdf.pdf'
                    },
                    doc: {
                        name: 'doc.doc'
                    },
                    docx: {
                        name: 'docx.docx'
                    },
                    none: {
                        name: 'file_none'
                    }
                };
                blob.name = fileArray[fileName].name;
                COMMON_FILE[fileName] = blob;
                return blob;
            }
        }

        var COMMON_TOOLS = exports.COMMON_TOOLS = {
            replaceAll: function replaceAll(origin, replace, string) {
                if ((typeof string === 'undefined' ? 'undefined' : (0, _typeof3.default)(string)) == 'object') {
                    string = (0, _stringify2.default)(string);
                    while ((string || '').toString().indexOf(origin) != -1) {
                        string = string.replace(origin, replace);
                    }
                    string = JSON.parse(string);
                } else {
                    while ((string || '').toString().indexOf(origin) != -1) {
                        string = string.replace(origin, replace);
                    }
                }
                return string;
            },
            judgeRequestMethod: function judgeRequestMethod(methodId) {
                var method = "POST";
                switch (methodId.toString()) {
                    case '1':
                        method = "GET";
                        break;
                    case '2':
                        method = "PUT";
                        break;
                    case '3':
                        method = "DELETE";
                        break;
                    case '4':
                        method = "HEAD";
                        break;
                    case '5':
                        method = "OPTIONS";
                        break;
                    case '6':
                        method = "PATCH";
                        break;
                    default:
                        method = "POST";
                }
                return method;
            },
            handleEnv: function handleEnv(env, url, headers, params, raw, requestType, flagFile, flagFormDataToJson) {
                if (!$.isEmptyObject(env)) {

                    var envHeaders = env.headers;
                    var headerExist = false;
                    var statusController = {
                        type: 'success',
                        errorReason: ''
                    };
                    var key = Object.key,
                        value = Object.value,
                        entries = _entries2.default;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = (0, _getIterator3.default)(entries(envHeaders)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _ref = _step.value;

                            var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                            var _key = _ref2[0];
                            var _value = _ref2[1];

                            headerExist = false;
                            var _iteratorNormalCompletion10 = true;
                            var _didIteratorError10 = false;
                            var _iteratorError10 = undefined;

                            try {
                                for (var _iterator10 = (0, _getIterator3.default)(entries(headers)), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                    var _ref19 = _step10.value;

                                    var _ref20 = (0, _slicedToArray3.default)(_ref19, 2);

                                    var _key9 = _ref20[0];
                                    var _value9 = _ref20[1];


                                    if (_key.toLowerCase() == _key9.toLowerCase()) {
                                        headerExist = true;
                                    }
                                }
                            } catch (err) {
                                _didIteratorError10 = true;
                                _iteratorError10 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                        _iterator10.return();
                                    }
                                } finally {
                                    if (_didIteratorError10) {
                                        throw _iteratorError10;
                                    }
                                }
                            }

                            if (headerExist == false) {
                                headers[_key] = _value;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    var envParams = env.extraParams;

                    if ((requestType == '0' || requestType == '2') && (typeof params === 'undefined' ? 'undefined' : (0, _typeof3.default)(params)) == 'object') {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = (0, _getIterator3.default)(entries(envParams)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var _ref3 = _step2.value;

                                var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

                                var _key2 = _ref4[0];
                                var _value2 = _ref4[1];

                                if (!(_key2 in params)) {
                                    if (/^#/.test(_value2)) {
                                        try {
                                            _value2 = JSON.parse(_value2.substring(1));
                                        } catch (e) {
                                            _value2 = _value2;
                                        }
                                    }
                                    params[_key2] = _value2;
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }


                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = (0, _getIterator3.default)(entries(env.globalParams)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var _ref5 = _step3.value;

                            var _ref6 = (0, _slicedToArray3.default)(_ref5, 2);

                            var _key3 = _ref6[0];
                            var _value3 = _ref6[1];

                            for (var _childKey in headers) {
                                headers[COMMON_TOOLS.replaceAll('{{' + _key3 + '}}', _value3, _childKey)] = COMMON_TOOLS.replaceAll('{{' + _key3 + '}}', _value3, headers[_childKey]);
                                if ('{{' + _key3 + '}}' == _childKey) {
                                    delete headers[_childKey];
                                }
                            }
                            url = COMMON_TOOLS.replaceAll('{{' + _key3 + '}}', _value3, url);
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    var midheaders = (0, _stringify2.default)(headers).toLowerCase();
                    midheaders = JSON.parse(midheaders);
                    if (env.envAuth) {
                        switch (Number(env.envAuth.status)) {
                            case 1:
                            {
                                if (midheaders["authorization"]) break;
                                var str = env.envAuth.basicAuth.username + ':' + env.envAuth.basicAuth.password;
                                headers['Authorization'] = 'Basic ' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str));
                                break;
                            }
                            case 2:
                            {
                                var token = COMMON_TOOLS.jwtEncode(env.envAuth.jwtAuth);
                                if (token.type == 'error') {
                                    statusController = token;
                                }
                                if (env.envAuth.jwtAuth.position == 'header') {
                                    if (midheaders["authorization"]) break;
                                    headers[env.envAuth.jwtAuth.tokenName || ""] = token;
                                } else {
                                    var query = {};
                                    query[env.envAuth.jwtAuth.tokenName] = token;
                                    url = _requestUtils.HANDLE_URL.jointQuery(url, query);
                                }
                            }
                        }
                    }

                    if (requestType == '1') {

                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;

                        try {
                            for (var _iterator4 = (0, _getIterator3.default)(entries(env.globalParams)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var _ref7 = _step4.value;

                                var _ref8 = (0, _slicedToArray3.default)(_ref7, 2);

                                var _key4 = _ref8[0];
                                var _value4 = _ref8[1];

                                var regRaw = new RegExp('{{' + _key4 + '}}', "gm");
                                raw = raw.toString().replace(regRaw, _value4);
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                    _iterator4.return();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }
                    } else {
                        if (typeof params == 'string') {
                            var _iteratorNormalCompletion5 = true;
                            var _didIteratorError5 = false;
                            var _iteratorError5 = undefined;

                            try {
                                for (var _iterator5 = (0, _getIterator3.default)(entries(env.globalParams)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                    var _ref9 = _step5.value;

                                    var _ref10 = (0, _slicedToArray3.default)(_ref9, 2);

                                    var _key5 = _ref10[0];
                                    var _value5 = _ref10[1];

                                    var regRaw = new RegExp('{{' + _key5 + '}}', "gm");
                                    params = params.toString().replace(regRaw, _value5);
                                }
                            } catch (err) {
                                _didIteratorError5 = true;
                                _iteratorError5 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                        _iterator5.return();
                                    }
                                } finally {
                                    if (_didIteratorError5) {
                                        throw _iteratorError5;
                                    }
                                }
                            }
                        } else if (typeof params == 'number') {
                            params = params.toString();
                            var _iteratorNormalCompletion6 = true;
                            var _didIteratorError6 = false;
                            var _iteratorError6 = undefined;

                            try {
                                for (var _iterator6 = (0, _getIterator3.default)(entries(env.globalParams)), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                    var _ref11 = _step6.value;

                                    var _ref12 = (0, _slicedToArray3.default)(_ref11, 2);

                                    var _key6 = _ref12[0];
                                    var _value6 = _ref12[1];

                                    var regRaw = new RegExp('{{' + _key6 + '}}', "gm");
                                    params = params.toString().replace(regRaw, _value6);
                                }
                            } catch (err) {
                                _didIteratorError6 = true;
                                _iteratorError6 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                        _iterator6.return();
                                    }
                                } finally {
                                    if (_didIteratorError6) {
                                        throw _iteratorError6;
                                    }
                                }
                            }
                        } else {
                            if (flagFile == true && requestType == '0') {

                                var _iteratorNormalCompletion7 = true;
                                var _didIteratorError7 = false;
                                var _iteratorError7 = undefined;

                                try {
                                    for (var _iterator7 = (0, _getIterator3.default)(entries(env.globalParams)), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                        var _ref13 = _step7.value;

                                        var _ref14 = (0, _slicedToArray3.default)(_ref13, 2);

                                        var _key7 = _ref14[0];
                                        var _value7 = _ref14[1];

                                        var regParams = new RegExp('{{' + _key7 + '}}', "gm");
                                        var _iteratorNormalCompletion8 = true;
                                        var _didIteratorError8 = false;
                                        var _iteratorError8 = undefined;

                                        try {
                                            for (var _iterator8 = (0, _getIterator3.default)(entries(params)), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                                var _ref15 = _step8.value;

                                                var _ref16 = (0, _slicedToArray3.default)(_ref15, 2);

                                                var key1 = _ref16[0];
                                                var value1 = _ref16[1];

                                                if (typeof value1 == 'string') {
                                                    params[key1.replace(regParams, _value7)] = value1.replace(regParams, _value7);
                                                }
                                                if (key1 != key1.replace(regParams, _value7)) {
                                                    params[key1.replace(regParams, _value7)] = value1.replace(regParams, _value7);
                                                    delete params[key1];
                                                }
                                            }
                                        } catch (err) {
                                            _didIteratorError8 = true;
                                            _iteratorError8 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                                    _iterator8.return();
                                                }
                                            } finally {
                                                if (_didIteratorError8) {
                                                    throw _iteratorError8;
                                                }
                                            }
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError7 = true;
                                    _iteratorError7 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                            _iterator7.return();
                                        }
                                    } finally {
                                        if (_didIteratorError7) {
                                            throw _iteratorError7;
                                        }
                                    }
                                }
                            } else {
                                var _iteratorNormalCompletion9 = true;
                                var _didIteratorError9 = false;
                                var _iteratorError9 = undefined;

                                try {
                                    for (var _iterator9 = (0, _getIterator3.default)(entries(env.globalParams)), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                                        var _ref17 = _step9.value;

                                        var _ref18 = (0, _slicedToArray3.default)(_ref17, 2);

                                        var _key8 = _ref18[0];
                                        var _value8 = _ref18[1];

                                        for (var childKey in params) {
                                            var afterKey = COMMON_TOOLS.replaceAll('{{' + _key8 + '}}', _value8, childKey);
                                            params[afterKey] = COMMON_TOOLS.replaceAll('{{' + _key8 + '}}', _value8, params[childKey]);
                                            if (afterKey != childKey) {
                                                delete params[childKey];
                                            }
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError9 = true;
                                    _iteratorError9 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                            _iterator9.return();
                                        }
                                    } finally {
                                        if (_didIteratorError9) {
                                            throw _iteratorError9;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var urlPatt = new RegExp('^(((http|ftp|https):\/\/)|)(([\\\w\\\-_]+([\\\w\\\-\\\.]*)?(\\\.(' + _constant.CONSTANT.DOMAIN.join('|') + ')))|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(localhost))((\\\/)|(\\\?)|(:)|($))');

                    if (env.baseUrl) {
                        if (!urlPatt.test(url)) {
                            url = env.baseUrl + url;
                        }
                    }
                }
                return {
                    type: statusController.type,
                    errorReason: statusController.errorReason,
                    url: url,
                    headers: headers,
                    params: params,
                    raw: raw
                };
            },
            selfLoopMatchJson: function selfLoopMatchJson(arrMatchList, response) {
                if (response === null || Object.prototype.toString.call(response).toLowerCase() == "[object array]" || (typeof response === 'undefined' ? 'undefined' : (0, _typeof3.default)(response)) == "object" && Object.prototype.toString.call(response).toLowerCase() == "[object object]") {

                    if (arrMatchList.length == 0 || !arrMatchList[0].paramKey || arrMatchList == null) {
                        return {
                            isMatch: true,
                            errorReason: ''
                        };
                    } else {
                        var isNum = function isNum(s) {
                            if (s != null && s !== "") {
                                return !isNaN(s);
                            }
                            return false;
                        };

                        var loopFun = function loopFun(arrMatchList, response) {
                            var isMatch = true;
                            var errorReason = '';
                            for (var i = 0; i < arrMatchList.length; i++) {
                                var arrMatch = arrMatchList[i];
                                arrMatch.paramInfo = arrMatch.paramInfo || '';
                                if (!arrMatch.paramKey) break;

                                var regular = arrMatch.matchRule;
                                var json2, json1;
                                if (response) {
                                    json1 = response[arrMatch.paramKey];
                                } else {
                                    json1 = undefined;
                                }
                                if (arrMatch.paramType && arrMatch.paramInfo.indexOf('#') != 0) {
                                    switch (Number(arrMatch.paramType)) {
                                        case 0:
                                        {

                                            break;
                                        }
                                        case 4:
                                        {
                                            arrMatch.paramInfo = [];
                                            break;
                                        }
                                        default:
                                        {
                                            arrMatch.paramInfo = '#' + arrMatch.paramInfo;
                                        }
                                    }
                                }
                                if (/^#/.test(arrMatch.paramInfo)) {
                                    try {
                                        json2 = JSON.parse(arrMatch.paramInfo.substring(1));
                                    } catch (e) {
                                        json2 = arrMatch.paramInfo;
                                        if (json2.slice(1, 10) == 'undefined') {
                                            json2 = undefined;
                                        }
                                    }
                                } else {
                                    json2 = arrMatch.paramInfo;
                                }
                                if (regular != 0) {
                                    if (regular == 1) {

                                        if ((typeof json2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(json2)) == 'object' && json2 != null && json1 != null) {
                                            json1 = (0, _stringify2.default)(json1);
                                            json2 = (0, _stringify2.default)(json2);
                                        }
                                        if (json1 === json2) {} else {
                                            isMatch = false;
                                            errorReason = '字段' + arrMatch.paramKey + '结果不匹配，匹配规则为:等于' + (0, _stringify2.default)(json2) + '，实际返回' + (0, _stringify2.default)(json1);
                                        }
                                    } else if (regular == 2) {

                                        if ((typeof json2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(json2)) == 'object' && json2 != null && json1 != null) {
                                            json1 = (0, _stringify2.default)(json1);
                                            json2 = (0, _stringify2.default)(json2);
                                        }
                                        if (json1 !== json2) {} else {
                                            isMatch = false;
                                            errorReason = '字段' + arrMatch.paramKey + '结果不匹配，匹配规则为:不等于' + (0, _stringify2.default)(json2) + '，实际返回' + (0, _stringify2.default)(json1);
                                        }
                                    } else if (regular == 3) {


                                        if (isNum(json1) && isNum(json2)) {
                                            if (json1 > json2) {} else {
                                                isMatch = false;
                                            }
                                        } else if (!isNum(json1) && !isNum(json2)) {
                                            if ((0, _stringify2.default)(json1) > (0, _stringify2.default)(json2)) {} else {
                                                isMatch = false;
                                            }
                                        } else {
                                            isMatch = false;
                                        }
                                        if (isMatch == false) {
                                            errorReason = '字段' + arrMatch.paramKey + '结果不匹配，匹配规则为:大于' + json2 + '，实际返回' + (0, _stringify2.default)(json1);
                                        }
                                    } else if (regular == 4) {

                                        if (isNum(json1) && isNum(json2)) {
                                            if (json1 < json2) {} else {
                                                isMatch = false;
                                            }
                                        } else if (!isNum(json1) && !isNum(json2)) {
                                            if ((0, _stringify2.default)(json1) < (0, _stringify2.default)(json2)) {} else {
                                                isMatch = false;
                                            }
                                        } else {
                                            isMatch = false;
                                        }
                                        if (isMatch == false) {
                                            errorReason = '字段' + arrMatch.paramKey + '结果不匹配，匹配规则为:小于' + json2 + '实际返回' + (0, _stringify2.default)(json1);
                                        }
                                    } else if (regular == 5) {

                                        try {
                                            var patt = new RegExp(json2);
                                            if (!patt.test(json1)) {
                                                isMatch = false;
                                                errorReason = '字段' + arrMatch.paramKey + '结果不匹配，匹配规则为:Reg=' + (0, _stringify2.default)(json2) + '，实际返回' + (0, _stringify2.default)(json1);
                                            }
                                        } catch (e) {
                                            isMatch = false;
                                            errorReason = '字段' + arrMatch.paramKey + '正则匹配失败，请检查您填写的正则表达式';
                                        }
                                    }
                                }
                                if (isMatch == false) {
                                    return {
                                        isMatch: isMatch,
                                        errorReason: errorReason
                                    };
                                }
                                if (arrMatch.childList.length > 0) {
                                    var result = {};
                                    var data = {};
                                    if (Object.prototype.toString.call(arrMatch.paramInfo) == '[object Array]') {
                                        data = response[arrMatch.paramKey][0];
                                    } else if (arrMatch.paramInfo.indexOf('#array') == 0) {
                                        var _patt = /#array\[(.*?)\]/;
                                        var num = 0;
                                        if (_patt.exec(arrMatch.paramInfo) && _patt.exec(arrMatch.paramInfo)[1]) {
                                            num = _patt.exec(arrMatch.paramInfo)[1];
                                        }
                                        if (response && response[arrMatch.paramKey]) {
                                            data = response[arrMatch.paramKey][num];
                                        } else {
                                            data = undefined;
                                        }
                                    } else {
                                        if (response) {
                                            data = response[arrMatch.paramKey];
                                        } else {
                                            data = undefined;
                                        }
                                    }
                                    result = loopFun(arrMatch.childList, data);
                                    if (result.isMatch == false) return result;
                                }
                            }
                            return {
                                isMatch: true,
                                errorReason: ''
                            };
                        };
                        return loopFun(arrMatchList, response);
                    }
                } else {
                    return {
                        isMatch: false,
                        errorReason: '返回信息并非json格式的对象'
                    };
                }

            },
            handleTime: function handleTime(testTime) {
                var Y, M, D, h, m, s;
                Y = testTime.getFullYear() + '-';
                M = (testTime.getMonth() + 1 < 10 ? '0' + (testTime.getMonth() + 1) : testTime.getMonth() + 1) + '-';
                D = testTime.getDate() + ' ';
                h = testTime.getHours() + ':';
                m = testTime.getMinutes() + ':';
                s = testTime.getSeconds();
                testTime = Y + M + D + h + m + s;
                return testTime;
            },

            sortArray: function sortArray(item1, item2) {
                if (item1.key > item2.key) return 1;else if (item1.key === item2.key) return 0;else return -1;
            },
            abortAll: function abortAll(ajaxs) {
                $.each(ajaxs, function (i, ajax) {
                    ajax.abort();
                });
            },
            base64url: function base64url(str) {
                var encodedSource = CryptoJS.enc.Base64.stringify(str);
                var reg = new RegExp('/', 'g');
                encodedSource = encodedSource.replace(/=+$/, '').replace(/\+/g, '-').replace(reg, '_');
                return encodedSource;
            },
            jwtEncode: function jwtEncode(jwtAuth) {

                if (!(jwtAuth.alg in _constant.CONSTANT.JWT_METHOD)) return {
                    type: 'error',
                    errorReason: "浏览器插件测试暂不支持加密方式： " + jwtAuth.alg + "，请使用专业版在线测试"
                };
                var header = (0, _stringify2.default)({
                    alg: jwtAuth.alg,
                    typ: jwtAuth.typ || "JWT"
                });
                var payload = '';
                try {
                    payload = (0, _stringify2.default)(JSON.parse(jwtAuth.payload));
                } catch (e) {
                    payload = '{}';
                }
                var secretSalt = jwtAuth.secretSalt;
                var before_sign = COMMON_TOOLS.base64url(CryptoJS.enc.Utf8.parse(header)) + '.' + COMMON_TOOLS.base64url(CryptoJS.enc.Utf8.parse(payload));
                var signature = CryptoJS[_constant.CONSTANT.JWT_METHOD[jwtAuth.alg]](before_sign, secretSalt);
                signature = COMMON_TOOLS.base64url(signature);
                var result = before_sign + '.' + signature;
                return result;
            }
        };

        var COMMON_FILE = exports.COMMON_FILE = {
            getAllFile: function getAllFile() {
                getFile('txt', window.location.origin + '/files/test_files/file_txt.txt');
                getFile('none', window.location.origin + '/files/test_files/file_none');
                getFile('jpg', window.location.origin + '/files/test_imgs/img_jpg.jpg');
                getFile('png', window.location.origin + '/files/test_imgs/img_png.png');
                getFile('gif', window.location.origin + '/files/test_imgs/img_gif.gif');
                getFile('pdf', window.location.origin + '/files/test_files/pdf.pdf');
                getFile('docx', window.location.origin + '/files/test_files/docx.docx');
                getFile('doc', window.location.origin + '/files/test_files/doc.doc');
            }
        };

        /***/ }),
    /* 20 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(67);
        var global = __webpack_require__(1);
        var hide = __webpack_require__(7);
        var Iterators = __webpack_require__(11);
        var TO_STRING_TAG = __webpack_require__(2)('toStringTag');

        var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
            'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
            'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
            'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
            'TextTrackList,TouchList').split(',');

        for (var i = 0; i < DOMIterables.length; i++) {
            var NAME = DOMIterables[i];
            var Collection = global[NAME];
            var proto = Collection && Collection.prototype;
            if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
            Iterators[NAME] = Iterators.Array;
        }


        /***/ }),
    /* 21 */
    /***/ (function(module, exports, __webpack_require__) {


        var aFunction = __webpack_require__(22);
        module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1: return function (a) {
                    return fn.call(that, a);
                };
                case 2: return function (a, b) {
                    return fn.call(that, a, b);
                };
                case 3: return function (a, b, c) {
                    return fn.call(that, a, b, c);
                };
            }
            return function (/* ...args */) {
                return fn.apply(that, arguments);
            };
        };


        /***/ }),
    /* 22 */
    /***/ (function(module, exports) {

        module.exports = function (it) {
            if (typeof it != 'function') throw TypeError(it + ' is not a function!');
            return it;
        };


        /***/ }),
    /* 23 */
    /***/ (function(module, exports) {

        module.exports = function (bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            };
        };


        /***/ }),
    /* 24 */
    /***/ (function(module, exports) {

        var id = 0;
        var px = Math.random();
        module.exports = function (key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };


        /***/ }),
    /* 25 */
    /***/ (function(module, exports, __webpack_require__) {

        var def = __webpack_require__(8).f;
        var has = __webpack_require__(10);
        var TAG = __webpack_require__(2)('toStringTag');

        module.exports = function (it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
        };


        /***/ }),
    /* 26 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $at = __webpack_require__(75)(true);


        __webpack_require__(47)(String, 'String', function (iterated) {
            this._t = String(iterated);
            this._i = 0;

        }, function () {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return { value: undefined, done: true };
            point = $at(O, index);
            this._i += point.length;
            return { value: point, done: false };
        });


        /***/ }),
    /* 27 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        exports.__esModule = true;

        var _isIterable2 = __webpack_require__(77);

        var _isIterable3 = _interopRequireDefault(_isIterable2);

        var _getIterator2 = __webpack_require__(14);

        var _getIterator3 = _interopRequireDefault(_getIterator2);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function () {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;

                try {
                    for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);

                        if (i && _arr.length === i) break;
                    }
                } catch (err) {
                    _d = true;
                    _e = err;
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]();
                    } finally {
                        if (_d) throw _e;
                    }
                }

                return _arr;
            }

            return function (arr, i) {
                if (Array.isArray(arr)) {
                    return arr;
                } else if ((0, _isIterable3.default)(Object(arr))) {
                    return sliceIterator(arr, i);
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
            };
        }();

        /***/ }),
    /* 28 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(80), __esModule: true };

        /***/ }),
    /* 29 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        exports.__esModule = true;

        var _iterator = __webpack_require__(86);

        var _iterator2 = _interopRequireDefault(_iterator);

        var _symbol = __webpack_require__(88);

        var _symbol2 = _interopRequireDefault(_symbol);

        var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
            return typeof obj === "undefined" ? "undefined" : _typeof(obj);
        } : function (obj) {
            return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
        };

        /***/ }),
    /* 30 */
    /***/ (function(module, exports) {


        module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
        };


        /***/ }),
    /* 31 */
    /***/ (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(5);
        var document = __webpack_require__(1).document;

        var is = isObject(document) && isObject(document.createElement);
        module.exports = function (it) {
            return is ? document.createElement(it) : {};
        };


        /***/ }),
    /* 32 */
    /***/ (function(module, exports, __webpack_require__) {


        var isObject = __webpack_require__(5);


        module.exports = function (it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
            if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
        };


        /***/ }),
    /* 33 */
    /***/ (function(module, exports) {


        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function (it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };


        /***/ }),
    /* 34 */
    /***/ (function(module, exports, __webpack_require__) {

        var shared = __webpack_require__(35)('keys');
        var uid = __webpack_require__(24);
        module.exports = function (key) {
            return shared[key] || (shared[key] = uid(key));
        };


        /***/ }),
    /* 35 */
    /***/ (function(module, exports, __webpack_require__) {

        var core = __webpack_require__(0);
        var global = __webpack_require__(1);
        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});

        (module.exports = function (key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
            version: core.version,
            mode: __webpack_require__(16) ? 'pure' : 'global',
            copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
        });


        /***/ }),
    /* 36 */
    /***/ (function(module, exports) {


        module.exports = (
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
        ).split(',');


        /***/ }),
    /* 37 */
    /***/ (function(module, exports, __webpack_require__) {


        var cof = __webpack_require__(15);
        var TAG = __webpack_require__(2)('toStringTag');

        var ARG = cof(function () { return arguments; }()) == 'Arguments';


        var tryGet = function (it, key) {
            try {
                return it[key];
            } catch (e) { /* empty */ }
        };

        module.exports = function (it) {
            var O, T, B;
            return it === undefined ? 'Undefined' : it === null ? 'Null'

                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T

                    : ARG ? cof(O)

                        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };


        /***/ }),
    /* 38 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(82), __esModule: true };

        /***/ }),
    /* 39 */
    /***/ (function(module, exports) {

        exports.f = Object.getOwnPropertySymbols;


        /***/ }),
    /* 40 */
    /***/ (function(module, exports, __webpack_require__) {

        exports.f = __webpack_require__(2);


        /***/ }),
    /* 41 */
    /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__(1);
        var core = __webpack_require__(0);
        var LIBRARY = __webpack_require__(16);
        var wksExt = __webpack_require__(40);
        var defineProperty = __webpack_require__(8).f;
        module.exports = function (name) {
            var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
            if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
        };


        /***/ }),
    /* 42 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.HANDLE_PARAMS = exports.HANDLE_URL = undefined;

        var _getIterator2 = __webpack_require__(14);

        var _getIterator3 = _interopRequireDefault(_getIterator2);

        var _slicedToArray2 = __webpack_require__(27);

        var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

        var _entries2 = __webpack_require__(28);

        var _entries3 = _interopRequireDefault(_entries2);

        var _stringify = __webpack_require__(18);

        var _stringify2 = _interopRequireDefault(_stringify);

        var _typeof2 = __webpack_require__(29);

        var _typeof3 = _interopRequireDefault(_typeof2);

        var _commonUtils = __webpack_require__(19);

        var _constants = __webpack_require__(57);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        "use strict";

        var rawFormData = '';
        var transformJson = function transformJson() {
            var data = {
                fun: {
                    main: null,
                    loop: null,
                    typeof: null
                },
                _bigNums: []
            };
            data.fun.typeof = function (object) {
                var tf = typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object),
                    ts = Object.prototype.toString.call(object);
                return null === object ? 'Null' : 'undefined' == tf ? 'Undefined' : 'boolean' == tf ? 'Boolean' : 'number' == tf ? 'Number' : 'string' == tf ? 'String' : '[object Function]' == ts ? 'Function' : '[object Array]' == ts ? 'Array' : '[object Date]' == ts ? 'Date' : 'Object';
            };
            data.fun.loop = function (arg) {
                var template = {
                    item: [],
                    loop: {
                        array: {
                            item: arg.array.item.slice(1, arg.array.item.length)
                        },
                        parent: {
                            name: arg.parent.name,
                            object: arg.parent.object
                        },
                        key: arg.key
                    }
                };
                if (arg.array.item.length > 0) {
                    template.item = JSON.parse((0, _stringify2.default)(arg.array.item));
                    template.item.splice(0, 1);
                    if (arg.array.item[0] == arg.parent.name && arg.array.item.length <= 2) {
                        if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]]) == 'Array') {
                            var length = template.loop.parent.object[arg.array.item[0]].length >= 1 ? template.loop.parent.object[arg.array.item[0]].length - 1 : 0;
                            if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]][length]) == 'Undefined') {
                                template.loop.parent.object[arg.array.item[0]][length] = {};
                            } else if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]][length]) != 'Object') {
                                length++;
                                template.loop.parent.object[arg.array.item[0]][length] = {};
                            }
                            template.loop.parent.object[arg.array.item[0]][length][arg.key.name] = arg.key.value;
                        } else if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]]) == 'Object') {
                            template.loop.parent.object[arg.array.item[0]][arg.key.name] = arg.key.value;
                        } else {
                            template.loop.parent.object[arg.array.item[0]] = {};
                            template.loop.parent.object[arg.array.item[0]][arg.key.name] = arg.key.value;
                        }
                    } else {
                        if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]]) == 'Array') {
                            template.loop.parent.object = template.loop.parent.object[arg.array.item[0]][0];
                        } else {
                            if (data.fun.typeof(template.loop.parent.object[arg.array.item[0]]) != 'Object') {
                                template.loop.parent.object[arg.array.item[0]] = {};
                            }
                            template.loop.parent.object = template.loop.parent.object[arg.array.item[0]];
                        }
                        data.fun.loop(template.loop);
                    }
                } else {
                    template.loop.parent.object = arg.key.value;
                }
            };
            data.fun.main = function (arg) {
                var template = {
                    loopObject: null,
                    array: {
                        parent: arg.parent || [],
                        child: [],
                        item: []
                    },
                    loopVar: {
                        $index: 0,
                        length: 0
                    },
                    icon: {
                        child: false,
                        parent: false
                    },
                    result: arg.result || {}
                };
                arg.input.map(function (val, key) {
                    template.array.item = (val.paramKey + '').replace(/(\s)*([:]{2}|[>]{2})(\s)*/g, '>>').split(/[:]{2}|[>]{2}/);
                    template.loopVar.length = template.array.item.length;
                    try {
                        val.paramInfo = val.paramInfo || '';
                        if (val.type) {
                            switch (parseInt(val.type || 0)) {
                                case 0:
                                case 1:
                                case 9:
                                {
                                    break;
                                }
                                default:
                                {
                                    if (val.type > 999) {

                                    } else {
                                        if (val.paramInfo) {
                                            val.paramInfo = '#' + val.paramInfo.replace(/^#/, '');
                                        } else {
                                            switch (parseInt(val.type || 0)) {
                                                case 2:
                                                case 13:
                                                {
                                                    val.paramInfo = {};
                                                    break;
                                                }
                                                case 12:
                                                {
                                                    val.paramInfo = [];
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    break;
                                }
                            }
                        }
                        if (/^#/.test(val.paramInfo) && !/^#(([1-9]\d*)|0)(\.\d*[0-9])?/.test(val.paramInfo)) {
                            if (/^#array/.test(val.paramInfo)) {
                                val.paramInfo = [];
                            } else {
                                var check_data = val.paramInfo.replace(/\s/g, '');
                                var bigNum_regex = /([\[:,]){1}(\d{16,})([,\]\}]){1}/g;
                                var m;

                                do {
                                    m = bigNum_regex.exec(check_data);
                                    if (m) {
                                        data._bigNums.push(m[2]);
                                        val.paramInfo = val.paramInfo.replace(/([\[:])?(\d{16,})\s*([,\}\]])/, "$1\"#$2\"$3");
                                    }
                                    check_data = val.paramInfo.replace(/\s/g, '');
                                } while (m);
                                val.paramInfo = JSON.parse(val.paramInfo.substring(1));
                            }
                        } else {
                            val.paramInfo = val.paramInfo || '';
                        }
                    } catch (e) {
                        val.paramInfo = val.type == 12 ? [] : val.paramInfo;
                    }
                    switch (template.loopVar.length) {
                        case 1:
                        {
                            if (template.array.item[0]) {
                                template.array.parent.push(template.array.item[0]);
                                template.result[template.array.item[0]] = val.paramInfo;
                                template.icon.parent = true;
                            }
                            break;
                        }
                        default:
                        {
                            template.loopVar.$index = template.array.parent.indexOf(template.array.item[template.loopVar.length - 2]);
                            if (template.loopVar.$index > -1) {
                                template.array.parent.push(template.array.item[template.loopVar.length - 1]);
                                template.loopObject = {
                                    array: {
                                        item: template.array.item
                                    },
                                    parent: {
                                        name: template.array.item[template.loopVar.length - 2],
                                        object: template.result
                                    },
                                    key: {
                                        name: template.array.item[template.loopVar.length - 1],
                                        value: val.paramInfo || ''
                                    }
                                };
                                data.fun.loop(template.loopObject);
                                template.icon.parent = true;
                            } else {
                                template.array.child.push(val);
                                template.icon.child = true;
                            }
                            break;
                        }
                    }
                });
                if (template.icon.parent && template.icon.child) {
                    template.result = data.fun.main({
                        input: template.array.child,
                        result: template.result,
                        parent: template.array.parent
                    });
                } else if (template.icon.child) {
                    template.array.child.map(function (val, key) {
                        template.result[val.paramKey] = val.paramInfo || '';
                    });
                }
                return template.result;
            };
            return function (input) {
                var template = {
                    input: [],
                    output: '',
                    match: []
                };
                template.input = JSON.parse((0, _stringify2.default)(input));
                rawFormData = data.fun.main({
                    input: template.input
                });
                template.output = (0, _stringify2.default)(rawFormData);
                template.match = template.output.match(/"#(([1-9]\d*)|0)(\.\d*[0-9])?"/g) || [];
                template.match.map(function (val, key) {
                    template.substring = val.substring(2, val.length - 1);
                    if (!isNaN(template.substring) && template.substring.length >= 15 && data._bigNums.indexOf(template.substring) > -1) {
                        template.output = template.output.replace(val, template.substring);
                    } else {
                        template.output = template.output.replace(val, val.substring(2, val.length - 1));
                    }
                });
                return template.output;
            };
        };
        var HANDLE_URL = exports.HANDLE_URL = {
            splitQuery: function splitQuery(url) {
                var hashArgs = {};
                if (url.indexOf('?') > -1) {
                    var queryString = url.substring(url.indexOf('?') + 1);
                    queryString = queryString.split('&');
                    queryString.forEach(function (group, i) {
                        if (group.indexOf('=') > -1) {
                            var index = group.indexOf('=') + 1;
                            var queryName = group.substring(0, index - 1);
                            var queryValue = group.substring(index);
                            if (!queryName) return;
                            if (queryName in hashArgs) {
                                if (Object.prototype.toString.call(hashArgs[queryName]) == '[object Array]') {
                                    hashArgs.push(queryValue);
                                } else {
                                    hashArgs[queryName] = [hashArgs[queryName], queryValue];
                                }
                            } else {
                                hashArgs[queryName] = queryValue;
                            }
                        } else {
                            if (!group) return;
                            hashArgs[group] = '';
                        }
                    });
                }
                return hashArgs;
            },
            jointQuery: function jointQuery(url, query) {
                var data = {
                    fun: {
                        joint: null
                    }
                };
                var equalSign = '=';
                data.fun.getQueryValue = function (queryName, queryValue) {
                    var output = '';
                    if (Object.prototype.toString.call(queryValue) == '[object Array]') {
                        queryValue.forEach(function (val, key) {
                            if (output == '') {
                                output = val;
                            } else {
                                output = output + '&' + queryName + equalSign + val;
                            }
                        });
                    } else {
                        output = queryValue;
                    }
                    return output;
                };
                data.fun.joint = function (query) {
                    var output = '';
                    var key = Object.key,
                        value = Object.value,
                        entries = _entries3.default;

                    if ((typeof query === 'undefined' ? 'undefined' : (0, _typeof3.default)(query)) == 'object') {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = (0, _getIterator3.default)(entries(query)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var _ref = _step.value;

                                var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                                var _key = _ref2[0];
                                var _value = _ref2[1];

                                if (output == '') {
                                    output = _key + equalSign + data.fun.getQueryValue(_key, _value);
                                } else {
                                    output = output + '&' + _key + equalSign + data.fun.getQueryValue(_key, _value);
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    } else {
                        output = query;
                    }
                    return output;
                };
                if ($.isEmptyObject(query) == false) {
                    if (url.indexOf('?') == -1) {

                        url = url + '?' + data.fun.joint(query);
                    } else {
                        var urlList = url.split('?');
                        url = urlList[0] + '?' + data.fun.joint(query);
                    }
                }
                return url;
            },

            handleProtocol: function handleProtocol(url, httpHeader) {
                var protocol = httpHeader == '1' ? 'https://' : 'http://';
                if (url.substring(0, 7) != "http://" && url.substring(0, 8) != "https://") {
                    url = protocol + url;
                }
                return url;
            },
            destRequestUrl: function destRequestUrl(url) {
                var urlDetail = '';
                try {
                    urlDetail = new URL(url);
                } catch (e) {
                    console.log(e);
                    urlDetail = url;
                }
                return urlDetail;
            },
            replaceRest: function replaceRest(url, rest) {
                for (var key in rest) {
                    url = url.replace(eval("/\{(?!\{)" + key + "\}(?!\})/g"), rest[key]);
                    url = url.replace(eval("/\:" + key + "/g"), rest[key]);
                }
                return url;
            },
            handleRightUrl: function handleRightUrl(url) {
                var url1 = HANDLE_URL.destRequestUrl(url);

                if (url1.scheme == 'http' && url1.port == '80' || url1.scheme == 'https' && url1.port == '443') {
                    url1 = url.replace(eval('/\:' + url1.port + '/'), '');
                } else {
                    url1 = url;
                }
                return url1;
            }
        };
        var HANDLE_PARAMS = exports.HANDLE_PARAMS = {
            handleFormJson: function handleFormJson(params) {
                var strJson = null;
                var error = {
                    status: 0,
                    errorText: ''
                };
                try {
                    strJson = transformJson()(params);
                } catch (e) {
                    console.log(e);
                    var error = {
                        status: 1,
                        errorText: 'form-data转json格式错误，请检查您填写的参数'
                    };
                }
                return {
                    dataParams: strJson,
                    error: error
                };
            },
            judgeFileExist: function judgeFileExist(params) {
                var flagFile = false;
                var key = Object.key,
                    value = Object.value,
                    entries = _entries3.default;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = (0, _getIterator3.default)(entries(params)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var _ref3 = _step2.value;

                        var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

                        var _key2 = _ref4[0];
                        var _value2 = _ref4[1];

                        if (Object.prototype.toString.call(_value2) == '[object Blob]') {
                            flagFile = true;
                        }
                        if (Object.prototype.toString.call(_value2) == '[object Array]') {
                            _value2.forEach(function (item) {
                                if (Object.prototype.toString.call(item) == '[object Blob]') {
                                    flagFile = true;
                                }
                            });
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return flagFile;
            },
            handleRequestParams: function handleRequestParams(headers, requestType, flagFormDataToJson, flagFile, params, raw, ContentType, processData, reportType, rawFormData) {
                var report = {};
                var request = {};
                switch (requestType.toString()) {
                    case '0':
                    case '2':
                    {
                        if (flagFormDataToJson) {
                            reportType = '1';
                            ContentType = 'application/json; charset=UTF-8';

                            if (typeof params != 'string') {
                                report = request = (0, _stringify2.default)(params);
                            } else {
                                report = request = params;
                            }
                        } else if (typeof params == 'string') {
                            ContentType = 'text/plain; charset=UTF-8';
                            requestType = reportType = '1';
                            request = report = raw = params;
                        } else if (typeof params == 'number') {
                            ContentType = 'text/plain; charset=UTF-8';
                            requestType = reportType = '1';
                            request = report = raw = params.toString();
                        } else {
                            var _key3 = Object.key,
                                _value3 = Object.value,
                                _entries = _entries3.default;

                            if (flagFile && requestType == '0') {
                                request = new FormData();

                                var _loop = function _loop(_key4, _value5) {

                                    if (Object.prototype.toString.call(_value5) == '[object Blob]') {
                                        request.append(_key4, _value5, _value5.name || _key4);
                                        report[_key4] = '[Object blob]';
                                    } else if (Object.prototype.toString.call(_value5) == '[object Array]') {

                                        var _flagFile = false;
                                        _value5.forEach(function (item) {
                                            if (Object.prototype.toString.call(item) == '[object Blob]') {
                                                _flagFile = true;
                                            }
                                        });
                                        if (_flagFile == true) {
                                            _value5.forEach(function (item) {
                                                if (Object.prototype.toString.call(item) == '[object Blob]') {
                                                    request.append(_key4, item, item.name || _key4);
                                                    report[_key4] = '[Object blob]';
                                                } else {

                                                    try {
                                                        if (typeof _value5 != 'string') {
                                                            _value5 = (0, _stringify2.default)(_value5);
                                                        }
                                                    } catch (e) {}
                                                    request.append(_key4, item);
                                                    report[_key4] = report[_key4] || '' + item;
                                                }
                                            });
                                        } else {
                                            request.append(_key4, _value5);
                                            report[_key4] = _value5;
                                        }
                                    } else {
                                        request.append(_key4, _value5);
                                        report[_key4] = _value5;
                                    }
                                    _value4 = _value5;
                                };

                                var _iteratorNormalCompletion3 = true;
                                var _didIteratorError3 = false;
                                var _iteratorError3 = undefined;

                                try {
                                    for (var _iterator3 = (0, _getIterator3.default)(_entries(params)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                        var _ref5 = _step3.value;

                                        var _ref6 = (0, _slicedToArray3.default)(_ref5, 2);

                                        var _key4 = _ref6[0];
                                        var _value4 = _ref6[1];

                                        _loop(_key4, _value4);
                                    }
                                } catch (err) {
                                    _didIteratorError3 = true;
                                    _iteratorError3 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                            _iterator3.return();
                                        }
                                    } finally {
                                        if (_didIteratorError3) {
                                            throw _iteratorError3;
                                        }
                                    }
                                }
                            } else {
                                request = report = params;
                            }
                        }
                        break;
                    }
                    case '1':
                    {

                        ContentType = 'text/plain; charset=UTF-8';
                        request = report = raw;
                        break;
                    }
                }

                var midheaders = (0, _stringify2.default)(headers).toLowerCase();
                midheaders = JSON.parse(midheaders);
                if (midheaders["content-type"]) {
                    ContentType = midheaders["content-type"];
                    if (midheaders["content-type"].toLowerCase().indexOf('json') > -1 || midheaders["content-type"].toLowerCase().indexOf('text') > -1) {
                        reportType = '1';
                    } else if (midheaders["content-type"].toLowerCase().indexOf('multipart/form-data') > -1) {
                        flagFile = true;
                    }
                }

                if (reportType == '1' && !flagFormDataToJson) {}

                if (flagFile && !flagFormDataToJson && requestType == '0') {
                    ContentType = false;
                    processData = false;
                }
                var key = Object.key,
                    value = Object.value,
                    entries = _entries3.default;


                if (ContentType == false) {
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = (0, _getIterator3.default)(entries(headers)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var _ref7 = _step4.value;

                            var _ref8 = (0, _slicedToArray3.default)(_ref7, 2);

                            var _key5 = _ref8[0];
                            var _value6 = _ref8[1];

                            if (_key5.toLowerCase() == 'content-type') {
                                delete headers[_key5];
                            }
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }
                }
                return {
                    report: report,
                    request: request,
                    raw: raw,
                    ContentType: ContentType,
                    processData: processData,
                    reportType: reportType,
                    headers: headers
                };
            },

            changeDataURLtoBlob: function changeDataURLtoBlob(dataurl) {
                var arr = dataurl.split(',');
                var mime = arr[0].match(/:(.*?);/);
                if (arr[0].match(/:(.*?);/)) {
                    mime = mime[1] || '';
                } else {
                    mime = '';
                }
                if (arr[1]) {
                    var bstr = atob(arr[1]),
                        n = bstr.length,
                        u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                } else {
                    u8arr = new Uint8Array(0);
                }
                return new Blob([u8arr], {
                    type: mime
                });
            }
        };

        /***/ }),
    /* 43 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(101), __esModule: true };

        /***/ }),
    /* 44 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var aFunction = __webpack_require__(22);

        function PromiseCapability(C) {
            var resolve, reject;
            this.promise = new C(function ($$resolve, $$reject) {
                if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                resolve = $$resolve;
                reject = $$reject;
            });
            this.resolve = aFunction(resolve);
            this.reject = aFunction(reject);
        }

        module.exports.f = function (C) {
            return new PromiseCapability(C);
        };


        /***/ }),
    /* 45 */
    /***/ (function(module, exports, __webpack_require__) {


        var defined = __webpack_require__(30);
        module.exports = function (it) {
            return Object(defined(it));
        };


        /***/ }),
    /* 46 */
    /***/ (function(module, exports, __webpack_require__) {


        var cof = __webpack_require__(15);

        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
        };


        /***/ }),
    /* 47 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var LIBRARY = __webpack_require__(16);
        var $export = __webpack_require__(4);
        var redefine = __webpack_require__(49);
        var hide = __webpack_require__(7);
        var Iterators = __webpack_require__(11);
        var $iterCreate = __webpack_require__(70);
        var setToStringTag = __webpack_require__(25);
        var getPrototypeOf = __webpack_require__(74);
        var ITERATOR = __webpack_require__(2)('iterator');
        var BUGGY = !([].keys && 'next' in [].keys());
        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function () { return this; };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function (kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                    case KEYS: return function keys() { return new Constructor(this, kind); };
                    case VALUES: return function values() { return new Constructor(this, kind); };
                } return function entries() { return new Constructor(this, kind); };
            };
            var TAG = NAME + ' Iterator';
            var DEF_VALUES = DEFAULT == VALUES;
            var VALUES_BUG = false;
            var proto = Base.prototype;
            var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
            var $default = $native || getMethod(DEFAULT);
            var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
            var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
            var methods, key, IteratorPrototype;

            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {

                    setToStringTag(IteratorPrototype, TAG, true);

                    if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
                }
            }

            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() { return $native.call(this); };
            }

            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
            }

            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };
                if (FORCED) for (key in methods) {
                    if (!(key in proto)) redefine(proto, key, methods[key]);
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
        };


        /***/ }),
    /* 48 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = !__webpack_require__(9) && !__webpack_require__(12)(function () {
            return Object.defineProperty(__webpack_require__(31)('div'), 'a', { get: function () { return 7; } }).a != 7;
        });


        /***/ }),
    /* 49 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = __webpack_require__(7);


        /***/ }),
    /* 50 */
    /***/ (function(module, exports, __webpack_require__) {


        var anObject = __webpack_require__(3);
        var dPs = __webpack_require__(71);
        var enumBugKeys = __webpack_require__(36);
        var IE_PROTO = __webpack_require__(34)('IE_PROTO');
        var Empty = function () { /* empty */ };
        var PROTOTYPE = 'prototype';


        var createDict = function () {

            var iframe = __webpack_require__(31)('iframe');
            var i = enumBugKeys.length;
            var lt = '<';
            var gt = '>';
            var iframeDocument;
            iframe.style.display = 'none';
            __webpack_require__(53).appendChild(iframe);
            iframe.src = 'javascript:';


            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
            return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null;

                result[IE_PROTO] = O;
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties);
        };


        /***/ }),
    /* 51 */
    /***/ (function(module, exports, __webpack_require__) {

        var has = __webpack_require__(10);
        var toIObject = __webpack_require__(6);
        var arrayIndexOf = __webpack_require__(72)(false);
        var IE_PROTO = __webpack_require__(34)('IE_PROTO');

        module.exports = function (object, names) {
            var O = toIObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);

            while (names.length > i) if (has(O, key = names[i++])) {
                ~arrayIndexOf(result, key) || result.push(key);
            }
            return result;
        };


        /***/ }),
    /* 52 */
    /***/ (function(module, exports, __webpack_require__) {


        var toInteger = __webpack_require__(33);
        var min = Math.min;
        module.exports = function (it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
        };


        /***/ }),
    /* 53 */
    /***/ (function(module, exports, __webpack_require__) {

        var document = __webpack_require__(1).document;
        module.exports = document && document.documentElement;


        /***/ }),
    /* 54 */
    /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__(37);
        var ITERATOR = __webpack_require__(2)('iterator');
        var Iterators = __webpack_require__(11);
        module.exports = __webpack_require__(0).getIteratorMethod = function (it) {
            if (it != undefined) return it[ITERATOR]
                || it['@@iterator']
                || Iterators[classof(it)];
        };


        /***/ }),
    /* 55 */
    /***/ (function(module, exports, __webpack_require__) {


        var $keys = __webpack_require__(51);
        var hiddenKeys = __webpack_require__(36).concat('length', 'prototype');

        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys);
        };


        /***/ }),
    /* 56 */
    /***/ (function(module, exports) {



        /***/ }),
    /* 57 */
    /***/ (function(module, exports) {

        module.exports = {"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}

        /***/ }),
    /* 58 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = __webpack_require__(99);


        /***/ }),
    /* 59 */
    /***/ (function(module, exports, __webpack_require__) {


        var anObject = __webpack_require__(3);
        var aFunction = __webpack_require__(22);
        var SPECIES = __webpack_require__(2)('species');
        module.exports = function (O, D) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
        };


        /***/ }),
    /* 60 */
    /***/ (function(module, exports, __webpack_require__) {

        var ctx = __webpack_require__(21);
        var invoke = __webpack_require__(107);
        var html = __webpack_require__(53);
        var cel = __webpack_require__(31);
        var global = __webpack_require__(1);
        var process = global.process;
        var setTask = global.setImmediate;
        var clearTask = global.clearImmediate;
        var MessageChannel = global.MessageChannel;
        var Dispatch = global.Dispatch;
        var counter = 0;
        var queue = {};
        var ONREADYSTATECHANGE = 'onreadystatechange';
        var defer, channel, port;
        var run = function () {
            var id = +this;

            if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
            }
        };
        var listener = function (event) {
            run.call(event.data);
        };

        if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
                var args = [];
                var i = 1;
                while (arguments.length > i) args.push(arguments[i++]);
                queue[++counter] = function () {

                    invoke(typeof fn == 'function' ? fn : Function(fn), args);
                };
                defer(counter);
                return counter;
            };
            clearTask = function clearImmediate(id) {
                delete queue[id];
            };

            if (__webpack_require__(15)(process) == 'process') {
                defer = function (id) {
                    process.nextTick(ctx(run, id, 1));
                };

            } else if (Dispatch && Dispatch.now) {
                defer = function (id) {
                    Dispatch.now(ctx(run, id, 1));
                };

            } else if (MessageChannel) {
                channel = new MessageChannel();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = ctx(port.postMessage, port, 1);


            } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                defer = function (id) {
                    global.postMessage(id + '', '*');
                };
                global.addEventListener('message', listener, false);

            } else if (ONREADYSTATECHANGE in cel('script')) {
                defer = function (id) {
                    html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
                        html.removeChild(this);
                        run.call(id);
                    };
                };

            } else {
                defer = function (id) {
                    setTimeout(ctx(run, id, 1), 0);
                };
            }
        }
        module.exports = {
            set: setTask,
            clear: clearTask
        };


        /***/ }),
    /* 61 */
    /***/ (function(module, exports) {

        module.exports = function (exec) {
            try {
                return { e: false, v: exec() };
            } catch (e) {
                return { e: true, v: e };
            }
        };


        /***/ }),
    /* 62 */
    /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__(3);
        var isObject = __webpack_require__(5);
        var newPromiseCapability = __webpack_require__(44);

        module.exports = function (C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise;
        };


        /***/ }),
    /* 63 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        exports.__esModule = true;

        var _promise = __webpack_require__(43);

        var _promise2 = _interopRequireDefault(_promise);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function (fn) {
            return function () {
                var gen = fn.apply(this, arguments);
                return new _promise2.default(function (resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }

                        if (info.done) {
                            resolve(value);
                        } else {
                            return _promise2.default.resolve(value).then(function (value) {
                                step("next", value);
                            }, function (err) {
                                step("throw", err);
                            });
                        }
                    }

                    return step("next");
                });
            };
        };

        /***/ }),
    /* 64 */
    /***/ (function(module, exports, __webpack_require__) {

        var getKeys = __webpack_require__(13);
        var toIObject = __webpack_require__(6);
        var isEnum = __webpack_require__(17).f;
        module.exports = function (isEntries) {
            return function (it) {
                var O = toIObject(it);
                var keys = getKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;
                while (length > i) if (isEnum.call(O, key = keys[i++])) {
                    result.push(isEntries ? [key, O[key]] : O[key]);
                } return result;
            };
        };


        /***/ }),
    /* 65 */
    /***/ (function(module, exports, __webpack_require__) {

        var META = __webpack_require__(24)('meta');
        var isObject = __webpack_require__(5);
        var has = __webpack_require__(10);
        var setDesc = __webpack_require__(8).f;
        var id = 0;
        var isExtensible = Object.isExtensible || function () {
            return true;
        };
        var FREEZE = !__webpack_require__(12)(function () {
            return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function (it) {
            setDesc(it, META, { value: {
                i: 'O' + ++id,
                w: {}
            } });
        };
        var fastKey = function (it, create) {

            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, META)) {

                if (!isExtensible(it)) return 'F';

                if (!create) return 'E';

                setMeta(it);

            } return it[META].i;
        };
        var getWeak = function (it, create) {
            if (!has(it, META)) {

                if (!isExtensible(it)) return true;

                if (!create) return false;

                setMeta(it);

            } return it[META].w;
        };

        var onFreeze = function (it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it;
        };
        var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
        };


        /***/ }),
    /* 66 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(20);
        __webpack_require__(26);
        module.exports = __webpack_require__(76);


        /***/ }),
    /* 67 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var addToUnscopables = __webpack_require__(68);
        var step = __webpack_require__(69);
        var Iterators = __webpack_require__(11);
        var toIObject = __webpack_require__(6);





        module.exports = __webpack_require__(47)(Array, 'Array', function (iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind;

        }, function () {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1);
            }
            if (kind == 'keys') return step(0, index);
            if (kind == 'values') return step(0, O[index]);
            return step(0, [index, O[index]]);
        }, 'values');


        Iterators.Arguments = Iterators.Array;

        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');


        /***/ }),
    /* 68 */
    /***/ (function(module, exports) {

        module.exports = function () { /* empty */ };


        /***/ }),
    /* 69 */
    /***/ (function(module, exports) {

        module.exports = function (done, value) {
            return { value: value, done: !!done };
        };


        /***/ }),
    /* 70 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var create = __webpack_require__(50);
        var descriptor = __webpack_require__(23);
        var setToStringTag = __webpack_require__(25);
        var IteratorPrototype = {};


        __webpack_require__(7)(IteratorPrototype, __webpack_require__(2)('iterator'), function () { return this; });

        module.exports = function (Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
            setToStringTag(Constructor, NAME + ' Iterator');
        };


        /***/ }),
    /* 71 */
    /***/ (function(module, exports, __webpack_require__) {

        var dP = __webpack_require__(8);
        var anObject = __webpack_require__(3);
        var getKeys = __webpack_require__(13);

        module.exports = __webpack_require__(9) ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties);
            var length = keys.length;
            var i = 0;
            var P;
            while (length > i) dP.f(O, P = keys[i++], Properties[P]);
            return O;
        };


        /***/ }),
    /* 72 */
    /***/ (function(module, exports, __webpack_require__) {



        var toIObject = __webpack_require__(6);
        var toLength = __webpack_require__(52);
        var toAbsoluteIndex = __webpack_require__(73);
        module.exports = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;


                if (IS_INCLUDES && el != el) while (length > index) {
                    value = O[index++];

                    if (value != value) return true;

                } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                } return !IS_INCLUDES && -1;
            };
        };


        /***/ }),
    /* 73 */
    /***/ (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(33);
        var max = Math.max;
        var min = Math.min;
        module.exports = function (index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
        };


        /***/ }),
    /* 74 */
    /***/ (function(module, exports, __webpack_require__) {


        var has = __webpack_require__(10);
        var toObject = __webpack_require__(45);
        var IE_PROTO = __webpack_require__(34)('IE_PROTO');
        var ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
            } return O instanceof Object ? ObjectProto : null;
        };


        /***/ }),
    /* 75 */
    /***/ (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(33);
        var defined = __webpack_require__(30);


        module.exports = function (TO_STRING) {
            return function (that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                a = s.charCodeAt(i);
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
                    ? TO_STRING ? s.charAt(i) : a
                    : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
        };


        /***/ }),
    /* 76 */
    /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__(3);
        var get = __webpack_require__(54);
        module.exports = __webpack_require__(0).getIterator = function (it) {
            var iterFn = get(it);
            if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
            return anObject(iterFn.call(it));
        };


        /***/ }),
    /* 77 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(78), __esModule: true };

        /***/ }),
    /* 78 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(20);
        __webpack_require__(26);
        module.exports = __webpack_require__(79);


        /***/ }),
    /* 79 */
    /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__(37);
        var ITERATOR = __webpack_require__(2)('iterator');
        var Iterators = __webpack_require__(11);
        module.exports = __webpack_require__(0).isIterable = function (it) {
            var O = Object(it);
            return O[ITERATOR] !== undefined
                || '@@iterator' in O

                || Iterators.hasOwnProperty(classof(O));
        };


        /***/ }),
    /* 80 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(81);
        module.exports = __webpack_require__(0).Object.entries;


        /***/ }),
    /* 81 */
    /***/ (function(module, exports, __webpack_require__) {


        var $export = __webpack_require__(4);
        var $entries = __webpack_require__(64)(true);

        $export($export.S, 'Object', {
            entries: function entries(it) {
                return $entries(it);
            }
        });


        /***/ }),
    /* 82 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(83);
        module.exports = __webpack_require__(0).Object.assign;


        /***/ }),
    /* 83 */
    /***/ (function(module, exports, __webpack_require__) {


        var $export = __webpack_require__(4);

        $export($export.S + $export.F, 'Object', { assign: __webpack_require__(84) });


        /***/ }),
    /* 84 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var getKeys = __webpack_require__(13);
        var gOPS = __webpack_require__(39);
        var pIE = __webpack_require__(17);
        var toObject = __webpack_require__(45);
        var IObject = __webpack_require__(46);
        var $assign = Object.assign;


        module.exports = !$assign || __webpack_require__(12)(function () {
            var A = {};
            var B = {};

            var S = Symbol();
            var K = 'abcdefghijklmnopqrst';
            A[S] = 7;
            K.split('').forEach(function (k) { B[k] = k; });
            return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
        }) ? function assign(target, source) {
            var T = toObject(target);
            var aLen = arguments.length;
            var index = 1;
            var getSymbols = gOPS.f;
            var isEnum = pIE.f;
            while (aLen > index) {
                var S = IObject(arguments[index++]);
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                var length = keys.length;
                var j = 0;
                var key;
                while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
            } return T;
        } : $assign;


        /***/ }),
    /* 85 */
    /***/ (function(module, exports, __webpack_require__) {

        var core = __webpack_require__(0);
        var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
        module.exports = function stringify(it) {
            return $JSON.stringify.apply($JSON, arguments);
        };


        /***/ }),
    /* 86 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(87), __esModule: true };

        /***/ }),
    /* 87 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(26);
        __webpack_require__(20);
        module.exports = __webpack_require__(40).f('iterator');


        /***/ }),
    /* 88 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(89), __esModule: true };

        /***/ }),
    /* 89 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(90);
        __webpack_require__(56);
        __webpack_require__(95);
        __webpack_require__(96);
        module.exports = __webpack_require__(0).Symbol;


        /***/ }),
    /* 90 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var global = __webpack_require__(1);
        var has = __webpack_require__(10);
        var DESCRIPTORS = __webpack_require__(9);
        var $export = __webpack_require__(4);
        var redefine = __webpack_require__(49);
        var META = __webpack_require__(65).KEY;
        var $fails = __webpack_require__(12);
        var shared = __webpack_require__(35);
        var setToStringTag = __webpack_require__(25);
        var uid = __webpack_require__(24);
        var wks = __webpack_require__(2);
        var wksExt = __webpack_require__(40);
        var wksDefine = __webpack_require__(41);
        var enumKeys = __webpack_require__(91);
        var isArray = __webpack_require__(92);
        var anObject = __webpack_require__(3);
        var isObject = __webpack_require__(5);
        var toIObject = __webpack_require__(6);
        var toPrimitive = __webpack_require__(32);
        var createDesc = __webpack_require__(23);
        var _create = __webpack_require__(50);
        var gOPNExt = __webpack_require__(93);
        var $GOPD = __webpack_require__(94);
        var $DP = __webpack_require__(8);
        var $keys = __webpack_require__(13);
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = 'prototype';
        var HIDDEN = wks('_hidden');
        var TO_PRIMITIVE = wks('toPrimitive');
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared('symbol-registry');
        var AllSymbols = shared('symbols');
        var OPSymbols = shared('op-symbols');
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == 'function';
        var QObject = global.QObject;

        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;


        var setSymbolDesc = DESCRIPTORS && $fails(function () {
            return _create(dP({}, 'a', {
                get: function () { return dP(this, 'a', { value: 7 }).a; }
            })).a != 7;
        }) ? function (it, key, D) {
            var protoDesc = gOPD(ObjectProto, key);
            if (protoDesc) delete ObjectProto[key];
            dP(it, key, D);
            if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
        } : dP;

        var wrap = function (tag) {
            var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
            sym._k = tag;
            return sym;
        };

        var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
            return typeof it == 'symbol';
        } : function (it) {
            return it instanceof $Symbol;
        };

        var $defineProperty = function defineProperty(it, key, D) {
            if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
            anObject(it);
            key = toPrimitive(key, true);
            anObject(D);
            if (has(AllSymbols, key)) {
                if (!D.enumerable) {
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                    it[HIDDEN][key] = true;
                } else {
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                    D = _create(D, { enumerable: createDesc(0, false) });
                } return setSymbolDesc(it, key, D);
            } return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P));
            var i = 0;
            var l = keys.length;
            var key;
            while (l > i) $defineProperty(it, key = keys[i++], P[key]);
            return it;
        };
        var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key = toPrimitive(key, true));
            if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            it = toIObject(it);
            key = toPrimitive(key, true);
            if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
            var D = gOPD(it, key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
            return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = gOPN(toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
            } return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var IS_OP = it === ObjectProto;
            var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
            } return result;
        };


        if (!USE_NATIVE) {
            $Symbol = function Symbol() {
                if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                var $set = function (value) {
                    if (this === ObjectProto) $set.call(OPSymbols, value);
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                    setSymbolDesc(this, tag, createDesc(1, value));
                };
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
                return wrap(tag);
            };
            redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                return this._k;
            });

            $GOPD.f = $getOwnPropertyDescriptor;
            $DP.f = $defineProperty;
            __webpack_require__(55).f = gOPNExt.f = $getOwnPropertyNames;
            __webpack_require__(17).f = $propertyIsEnumerable;
            __webpack_require__(39).f = $getOwnPropertySymbols;

            if (DESCRIPTORS && !__webpack_require__(16)) {
                redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
            }

            wksExt.f = function (name) {
                return wrap(wks(name));
            };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

        for (var es6Symbols = (

            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
        ).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

        for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

        $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {

            'for': function (key) {
                return has(SymbolRegistry, key += '')
                    ? SymbolRegistry[key]
                    : SymbolRegistry[key] = $Symbol(key);
            },

            keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
                for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
            },
            useSetter: function () { setter = true; },
            useSimple: function () { setter = false; }
        });

        $export($export.S + $export.F * !USE_NATIVE, 'Object', {

            create: $create,

            defineProperty: $defineProperty,

            defineProperties: $defineProperties,

            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,

            getOwnPropertyNames: $getOwnPropertyNames,

            getOwnPropertySymbols: $getOwnPropertySymbols
        });


        $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
            var S = $Symbol();



            return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
        })), 'JSON', {
            stringify: function stringify(it) {
                var args = [it];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) args.push(arguments[i++]);
                $replacer = replacer = args[1];
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return;
                if (!isArray(replacer)) replacer = function (key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
            }
        });


        $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);

        setToStringTag($Symbol, 'Symbol');

        setToStringTag(Math, 'Math', true);

        setToStringTag(global.JSON, 'JSON', true);


        /***/ }),
    /* 91 */
    /***/ (function(module, exports, __webpack_require__) {


        var getKeys = __webpack_require__(13);
        var gOPS = __webpack_require__(39);
        var pIE = __webpack_require__(17);
        module.exports = function (it) {
            var result = getKeys(it);
            var getSymbols = gOPS.f;
            if (getSymbols) {
                var symbols = getSymbols(it);
                var isEnum = pIE.f;
                var i = 0;
                var key;
                while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
            } return result;
        };


        /***/ }),
    /* 92 */
    /***/ (function(module, exports, __webpack_require__) {


        var cof = __webpack_require__(15);
        module.exports = Array.isArray || function isArray(arg) {
            return cof(arg) == 'Array';
        };


        /***/ }),
    /* 93 */
    /***/ (function(module, exports, __webpack_require__) {


        var toIObject = __webpack_require__(6);
        var gOPN = __webpack_require__(55).f;
        var toString = {}.toString;

        var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
            ? Object.getOwnPropertyNames(window) : [];

        var getWindowNames = function (it) {
            try {
                return gOPN(it);
            } catch (e) {
                return windowNames.slice();
            }
        };

        module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
        };


        /***/ }),
    /* 94 */
    /***/ (function(module, exports, __webpack_require__) {

        var pIE = __webpack_require__(17);
        var createDesc = __webpack_require__(23);
        var toIObject = __webpack_require__(6);
        var toPrimitive = __webpack_require__(32);
        var has = __webpack_require__(10);
        var IE8_DOM_DEFINE = __webpack_require__(48);
        var gOPD = Object.getOwnPropertyDescriptor;

        exports.f = __webpack_require__(9) ? gOPD : function getOwnPropertyDescriptor(O, P) {
            O = toIObject(O);
            P = toPrimitive(P, true);
            if (IE8_DOM_DEFINE) try {
                return gOPD(O, P);
            } catch (e) { /* empty */ }
            if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
        };


        /***/ }),
    /* 95 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(41)('asyncIterator');


        /***/ }),
    /* 96 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(41)('observable');


        /***/ }),
    /* 97 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var CONSTANT = exports.CONSTANT = {
            DOMAIN: ['com', 'cn', 'xin', 'net', 'top', 'xyz', 'wang', 'shop', 'site', 'club', 'cc', 'fun', 'online', 'biz', 'red', 'link', 'ltd', 'mobi', 'info', 'org', 'name', 'vip', 'pro', 'work', 'tv', 'kim', 'group', 'tech', 'store', 'ren', 'ink', 'pub', 'live', 'wiki', 'design', 'ai'],
            JWT_METHOD: {
                HS256: 'HmacSHA256',
                HS384: 'HmacSHA384',
                HS512: 'HmacSHA512'
            }
        };

        /***/ }),
    /* 98 */,
    /* 99 */
    /***/ (function(module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */



        var g = (function() { return this })() || Function("return this")();



        var hadRuntime = g.regeneratorRuntime &&
            Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;


        var oldRuntime = hadRuntime && g.regeneratorRuntime;


        g.regeneratorRuntime = undefined;

        module.exports = __webpack_require__(100);

        if (hadRuntime) {

            g.regeneratorRuntime = oldRuntime;
        } else {

            try {
                delete g.regeneratorRuntime;
            } catch(e) {
                g.regeneratorRuntime = undefined;
            }
        }


        /***/ }),
    /* 100 */
    /***/ (function(module, exports) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        !(function(global) {
            "use strict";

            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined;
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

            var inModule = typeof module === "object";
            var runtime = global.regeneratorRuntime;
            if (runtime) {
                if (inModule) {


                    module.exports = runtime;
                }


                return;
            }



            runtime = global.regeneratorRuntime = inModule ? module.exports : {};

            function wrap(innerFn, outerFn, self, tryLocsList) {

                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);



                generator._invoke = makeInvokeMethod(innerFn, self, context);

                return generator;
            }
            runtime.wrap = wrap;











            function tryCatch(fn, obj, arg) {
                try {
                    return { type: "normal", arg: fn.call(obj, arg) };
                } catch (err) {
                    return { type: "throw", arg: err };
                }
            }

            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";



            var ContinueSentinel = {};





            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {}



            var IteratorPrototype = {};
            IteratorPrototype[iteratorSymbol] = function () {
                return this;
            };

            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype &&
                NativeIteratorPrototype !== Op &&
                hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {


                IteratorPrototype = NativeIteratorPrototype;
            }

            var Gp = GeneratorFunctionPrototype.prototype =
                Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
            GeneratorFunctionPrototype.constructor = GeneratorFunction;
            GeneratorFunctionPrototype[toStringTagSymbol] =
                GeneratorFunction.displayName = "GeneratorFunction";



            function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                    prototype[method] = function(arg) {
                        return this._invoke(method, arg);
                    };
                });
            }

            runtime.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor
                    ? ctor === GeneratorFunction ||


                    (ctor.displayName || ctor.name) === "GeneratorFunction"
                    : false;
            };

            runtime.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    if (!(toStringTagSymbol in genFun)) {
                        genFun[toStringTagSymbol] = "GeneratorFunction";
                    }
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            };





            runtime.awrap = function(arg) {
                return { __await: arg };
            };

            function AsyncIterator(generator) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                        reject(record.arg);
                    } else {
                        var result = record.arg;
                        var value = result.value;
                        if (value &&
                            typeof value === "object" &&
                            hasOwn.call(value, "__await")) {
                            return Promise.resolve(value.__await).then(function(value) {
                                invoke("next", value, resolve, reject);
                            }, function(err) {
                                invoke("throw", err, resolve, reject);
                            });
                        }

                        return Promise.resolve(value).then(function(unwrapped) {















                            result.value = unwrapped;
                            resolve(result);
                        }, reject);
                    }
                }

                var previousPromise;

                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new Promise(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }

                    return previousPromise =












                        previousPromise ? previousPromise.then(
                            callInvokeWithMethodAndArg,


                            callInvokeWithMethodAndArg
                        ) : callInvokeWithMethodAndArg();
                }



                this._invoke = enqueue;
            }

            defineIteratorMethods(AsyncIterator.prototype);
            AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                return this;
            };
            runtime.AsyncIterator = AsyncIterator;




            runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                var iter = new AsyncIterator(
                    wrap(innerFn, outerFn, self, tryLocsList)
                );

                return runtime.isGeneratorFunction(outerFn)
                    ? iter
                    : iter.next().then(function(result) {
                        return result.done ? result.value : iter.next();
                    });
            };

            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;

                return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                        throw new Error("Generator is already running");
                    }

                    if (state === GenStateCompleted) {
                        if (method === "throw") {
                            throw arg;
                        }



                        return doneResult();
                    }

                    context.method = method;
                    context.arg = arg;

                    while (true) {
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }

                        if (context.method === "next") {


                            context.sent = context._sent = context.arg;

                        } else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }

                            context.dispatchException(context.arg);

                        } else if (context.method === "return") {
                            context.abrupt("return", context.arg);
                        }

                        state = GenStateExecuting;

                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {


                            state = context.done
                                ? GenStateCompleted
                                : GenStateSuspendedYield;

                            if (record.arg === ContinueSentinel) {
                                continue;
                            }

                            return {
                                value: record.arg,
                                done: context.done
                            };

                        } else if (record.type === "throw") {
                            state = GenStateCompleted;


                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            }





            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined) {


                    context.delegate = null;

                    if (context.method === "throw") {
                        if (delegate.iterator.return) {


                            context.method = "return";
                            context.arg = undefined;
                            maybeInvokeDelegate(delegate, context);

                            if (context.method === "throw") {


                                return ContinueSentinel;
                            }
                        }

                        context.method = "throw";
                        context.arg = new TypeError(
                            "The iterator does not provide a 'throw' method");
                    }

                    return ContinueSentinel;
                }

                var record = tryCatch(method, delegate.iterator, context.arg);

                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }

                var info = record.arg;

                if (! info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }

                if (info.done) {


                    context[delegate.resultName] = info.value;


                    context.next = delegate.nextLoc;







                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined;
                    }

                } else {

                    return info;
                }



                context.delegate = null;
                return ContinueSentinel;
            }



            defineIteratorMethods(Gp);

            Gp[toStringTagSymbol] = "Generator";






            Gp[iteratorSymbol] = function() {
                return this;
            };

            Gp.toString = function() {
                return "[object Generator]";
            };

            function pushTryEntry(locs) {
                var entry = { tryLoc: locs[0] };

                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }

                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }

                this.tryEntries.push(entry);
            }

            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }

            function Context(tryLocsList) {



                this.tryEntries = [{ tryLoc: "root" }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }

            runtime.keys = function(object) {
                var keys = [];
                for (var key in object) {
                    keys.push(key);
                }
                keys.reverse();



                return function next() {
                    while (keys.length) {
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    }




                    next.done = true;
                    return next;
                };
            };

            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                        return iteratorMethod.call(iterable);
                    }

                    if (typeof iterable.next === "function") {
                        return iterable;
                    }

                    if (!isNaN(iterable.length)) {
                        var i = -1, next = function next() {
                            while (++i < iterable.length) {
                                if (hasOwn.call(iterable, i)) {
                                    next.value = iterable[i];
                                    next.done = false;
                                    return next;
                                }
                            }

                            next.value = undefined;
                            next.done = true;

                            return next;
                        };

                        return next.next = next;
                    }
                }


                return { next: doneResult };
            }
            runtime.values = values;

            function doneResult() {
                return { value: undefined, done: true };
            }

            Context.prototype = {
                constructor: Context,

                reset: function(skipTempReset) {
                    this.prev = 0;
                    this.next = 0;


                    this.sent = this._sent = undefined;
                    this.done = false;
                    this.delegate = null;

                    this.method = "next";
                    this.arg = undefined;

                    this.tryEntries.forEach(resetTryEntry);

                    if (!skipTempReset) {
                        for (var name in this) {

                            if (name.charAt(0) === "t" &&
                                hasOwn.call(this, name) &&
                                !isNaN(+name.slice(1))) {
                                this[name] = undefined;
                            }
                        }
                    }
                },

                stop: function() {
                    this.done = true;

                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                        throw rootRecord.arg;
                    }

                    return this.rval;
                },

                dispatchException: function(exception) {
                    if (this.done) {
                        throw exception;
                    }

                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;

                        if (caught) {


                            context.method = "next";
                            context.arg = undefined;
                        }

                        return !! caught;
                    }

                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;

                        if (entry.tryLoc === "root") {



                            return handle("end");
                        }

                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");

                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                } else if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }

                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else {
                                throw new Error("try statement without catch or finally");
                            }
                        }
                    }
                },

                abrupt: function(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev &&
                            hasOwn.call(entry, "finallyLoc") &&
                            this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }

                    if (finallyEntry &&
                        (type === "break" ||
                            type === "continue") &&
                        finallyEntry.tryLoc <= arg &&
                        arg <= finallyEntry.finallyLoc) {


                        finallyEntry = null;
                    }

                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;

                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }

                    return this.complete(record);
                },

                complete: function(record, afterLoc) {
                    if (record.type === "throw") {
                        throw record.arg;
                    }

                    if (record.type === "break" ||
                        record.type === "continue") {
                        this.next = record.arg;
                    } else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                        this.next = afterLoc;
                    }

                    return ContinueSentinel;
                },

                finish: function(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },

                "catch": function(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }



                    throw new Error("illegal catch attempt");
                },

                delegateYield: function(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };

                    if (this.method === "next") {


                        this.arg = undefined;
                    }

                    return ContinueSentinel;
                }
            };
        })(



            (function() { return this })() || Function("return this")()
        );


        /***/ }),
    /* 101 */
    /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__(56);
        __webpack_require__(26);
        __webpack_require__(20);
        __webpack_require__(102);
        __webpack_require__(113);
        __webpack_require__(114);
        module.exports = __webpack_require__(0).Promise;


        /***/ }),
    /* 102 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var LIBRARY = __webpack_require__(16);
        var global = __webpack_require__(1);
        var ctx = __webpack_require__(21);
        var classof = __webpack_require__(37);
        var $export = __webpack_require__(4);
        var isObject = __webpack_require__(5);
        var aFunction = __webpack_require__(22);
        var anInstance = __webpack_require__(103);
        var forOf = __webpack_require__(104);
        var speciesConstructor = __webpack_require__(59);
        var task = __webpack_require__(60).set;
        var microtask = __webpack_require__(108)();
        var newPromiseCapabilityModule = __webpack_require__(44);
        var perform = __webpack_require__(61);
        var userAgent = __webpack_require__(109);
        var promiseResolve = __webpack_require__(62);
        var PROMISE = 'Promise';
        var TypeError = global.TypeError;
        var process = global.process;
        var versions = process && process.versions;
        var v8 = versions && versions.v8 || '';
        var $Promise = global[PROMISE];
        var isNode = classof(process) == 'process';
        var empty = function () { /* empty */ };
        var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
        var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

        var USE_NATIVE = !!function () {
            try {

                var promise = $Promise.resolve(1);
                var FakePromise = (promise.constructor = {})[__webpack_require__(2)('species')] = function (exec) {
                    exec(empty, empty);
                };

                return (isNode || typeof PromiseRejectionEvent == 'function')
                    && promise.then(empty) instanceof FakePromise



                    && v8.indexOf('6.6') !== 0
                    && userAgent.indexOf('Chrome/66') === -1;
            } catch (e) { /* empty */ }
        }();


        var isThenable = function (it) {
            var then;
            return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
        };
        var notify = function (promise, isReject) {
            if (promise._n) return;
            promise._n = true;
            var chain = promise._c;
            microtask(function () {
                var value = promise._v;
                var ok = promise._s == 1;
                var i = 0;
                var run = function (reaction) {
                    var handler = ok ? reaction.ok : reaction.fail;
                    var resolve = reaction.resolve;
                    var reject = reaction.reject;
                    var domain = reaction.domain;
                    var result, then, exited;
                    try {
                        if (handler) {
                            if (!ok) {
                                if (promise._h == 2) onHandleUnhandled(promise);
                                promise._h = 1;
                            }
                            if (handler === true) result = value;
                            else {
                                if (domain) domain.enter();
                                result = handler(value);
                                if (domain) {
                                    domain.exit();
                                    exited = true;
                                }
                            }
                            if (result === reaction.promise) {
                                reject(TypeError('Promise-chain cycle'));
                            } else if (then = isThenable(result)) {
                                then.call(result, resolve, reject);
                            } else resolve(result);
                        } else reject(value);
                    } catch (e) {
                        if (domain && !exited) domain.exit();
                        reject(e);
                    }
                };
                while (chain.length > i) run(chain[i++]);
                promise._c = [];
                promise._n = false;
                if (isReject && !promise._h) onUnhandled(promise);
            });
        };
        var onUnhandled = function (promise) {
            task.call(global, function () {
                var value = promise._v;
                var unhandled = isUnhandled(promise);
                var result, handler, console;
                if (unhandled) {
                    result = perform(function () {
                        if (isNode) {
                            process.emit('unhandledRejection', value, promise);
                        } else if (handler = global.onunhandledrejection) {
                            handler({ promise: promise, reason: value });
                        } else if ((console = global.console) && console.error) {
                            console.error('Unhandled promise rejection', value);
                        }
                    });

                    promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                } promise._a = undefined;
                if (unhandled && result.e) throw result.v;
            });
        };
        var isUnhandled = function (promise) {
            return promise._h !== 1 && (promise._a || promise._c).length === 0;
        };
        var onHandleUnhandled = function (promise) {
            task.call(global, function () {
                var handler;
                if (isNode) {
                    process.emit('rejectionHandled', promise);
                } else if (handler = global.onrejectionhandled) {
                    handler({ promise: promise, reason: promise._v });
                }
            });
        };
        var $reject = function (value) {
            var promise = this;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            promise._v = value;
            promise._s = 2;
            if (!promise._a) promise._a = promise._c.slice();
            notify(promise, true);
        };
        var $resolve = function (value) {
            var promise = this;
            var then;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            try {
                if (promise === value) throw TypeError("Promise can't be resolved itself");
                if (then = isThenable(value)) {
                    microtask(function () {
                        var wrapper = { _w: promise, _d: false };
                        try {
                            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                        } catch (e) {
                            $reject.call(wrapper, e);
                        }
                    });
                } else {
                    promise._v = value;
                    promise._s = 1;
                    notify(promise, false);
                }
            } catch (e) {
                $reject.call({ _w: promise, _d: false }, e);
            }
        };


        if (!USE_NATIVE) {

            $Promise = function Promise(executor) {
                anInstance(this, $Promise, PROMISE, '_h');
                aFunction(executor);
                Internal.call(this);
                try {
                    executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                } catch (err) {
                    $reject.call(this, err);
                }
            };

            Internal = function Promise(executor) {
                this._c = [];
                this._a = undefined;
                this._s = 0;
                this._d = false;
                this._v = undefined;
                this._h = 0;
                this._n = false;
            };
            Internal.prototype = __webpack_require__(110)($Promise.prototype, {

                then: function then(onFulfilled, onRejected) {
                    var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                    reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                    reaction.fail = typeof onRejected == 'function' && onRejected;
                    reaction.domain = isNode ? process.domain : undefined;
                    this._c.push(reaction);
                    if (this._a) this._a.push(reaction);
                    if (this._s) notify(this, false);
                    return reaction.promise;
                },

                'catch': function (onRejected) {
                    return this.then(undefined, onRejected);
                }
            });
            OwnPromiseCapability = function () {
                var promise = new Internal();
                this.promise = promise;
                this.resolve = ctx($resolve, promise, 1);
                this.reject = ctx($reject, promise, 1);
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
                return C === $Promise || C === Wrapper
                    ? new OwnPromiseCapability(C)
                    : newGenericPromiseCapability(C);
            };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
        __webpack_require__(25)($Promise, PROMISE);
        __webpack_require__(111)(PROMISE);
        Wrapper = __webpack_require__(0)[PROMISE];


        $export($export.S + $export.F * !USE_NATIVE, PROMISE, {

            reject: function reject(r) {
                var capability = newPromiseCapability(this);
                var $$reject = capability.reject;
                $$reject(r);
                return capability.promise;
            }
        });
        $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {

            resolve: function resolve(x) {
                return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
            }
        });
        $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(112)(function (iter) {
            $Promise.all(iter)['catch'](empty);
        })), PROMISE, {

            all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function () {
                    var values = [];
                    var index = 0;
                    var remaining = 1;
                    forOf(iterable, false, function (promise) {
                        var $index = index++;
                        var alreadyCalled = false;
                        values.push(undefined);
                        remaining++;
                        C.resolve(promise).then(function (value) {
                            if (alreadyCalled) return;
                            alreadyCalled = true;
                            values[$index] = value;
                            --remaining || resolve(values);
                        }, reject);
                    });
                    --remaining || resolve(values);
                });
                if (result.e) reject(result.v);
                return capability.promise;
            },

            race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function () {
                    forOf(iterable, false, function (promise) {
                        C.resolve(promise).then(capability.resolve, reject);
                    });
                });
                if (result.e) reject(result.v);
                return capability.promise;
            }
        });


        /***/ }),
    /* 103 */
    /***/ (function(module, exports) {

        module.exports = function (it, Constructor, name, forbiddenField) {
            if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
                throw TypeError(name + ': incorrect invocation!');
            } return it;
        };


        /***/ }),
    /* 104 */
    /***/ (function(module, exports, __webpack_require__) {

        var ctx = __webpack_require__(21);
        var call = __webpack_require__(105);
        var isArrayIter = __webpack_require__(106);
        var anObject = __webpack_require__(3);
        var toLength = __webpack_require__(52);
        var getIterFn = __webpack_require__(54);
        var BREAK = {};
        var RETURN = {};
        var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
            var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
            var f = ctx(fn, that, entries ? 2 : 1);
            var index = 0;
            var length, step, iterator, result;
            if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');

            if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                if (result === BREAK || result === RETURN) return result;
            } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                result = call(iterator, f, step.value, entries);
                if (result === BREAK || result === RETURN) return result;
            }
        };
        exports.BREAK = BREAK;
        exports.RETURN = RETURN;


        /***/ }),
    /* 105 */
    /***/ (function(module, exports, __webpack_require__) {


        var anObject = __webpack_require__(3);
        module.exports = function (iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value);

            } catch (e) {
                var ret = iterator['return'];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
            }
        };


        /***/ }),
    /* 106 */
    /***/ (function(module, exports, __webpack_require__) {


        var Iterators = __webpack_require__(11);
        var ITERATOR = __webpack_require__(2)('iterator');
        var ArrayProto = Array.prototype;

        module.exports = function (it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };


        /***/ }),
    /* 107 */
    /***/ (function(module, exports) {


        module.exports = function (fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
                case 0: return un ? fn()
                    : fn.call(that);
                case 1: return un ? fn(args[0])
                    : fn.call(that, args[0]);
                case 2: return un ? fn(args[0], args[1])
                    : fn.call(that, args[0], args[1]);
                case 3: return un ? fn(args[0], args[1], args[2])
                    : fn.call(that, args[0], args[1], args[2]);
                case 4: return un ? fn(args[0], args[1], args[2], args[3])
                    : fn.call(that, args[0], args[1], args[2], args[3]);
            } return fn.apply(that, args);
        };


        /***/ }),
    /* 108 */
    /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__(1);
        var macrotask = __webpack_require__(60).set;
        var Observer = global.MutationObserver || global.WebKitMutationObserver;
        var process = global.process;
        var Promise = global.Promise;
        var isNode = __webpack_require__(15)(process) == 'process';

        module.exports = function () {
            var head, last, notify;

            var flush = function () {
                var parent, fn;
                if (isNode && (parent = process.domain)) parent.exit();
                while (head) {
                    fn = head.fn;
                    head = head.next;
                    try {
                        fn();
                    } catch (e) {
                        if (head) notify();
                        else last = undefined;
                        throw e;
                    }
                } last = undefined;
                if (parent) parent.enter();
            };


            if (isNode) {
                notify = function () {
                    process.nextTick(flush);
                };

            } else if (Observer && !(global.navigator && global.navigator.standalone)) {
                var toggle = true;
                var node = document.createTextNode('');
                new Observer(flush).observe(node, { characterData: true });
                notify = function () {
                    node.data = toggle = !toggle;
                };

            } else if (Promise && Promise.resolve) {

                var promise = Promise.resolve(undefined);
                notify = function () {
                    promise.then(flush);
                };






            } else {
                notify = function () {

                    macrotask.call(global, flush);
                };
            }

            return function (fn) {
                var task = { fn: fn, next: undefined };
                if (last) last.next = task;
                if (!head) {
                    head = task;
                    notify();
                } last = task;
            };
        };


        /***/ }),
    /* 109 */
    /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__(1);
        var navigator = global.navigator;

        module.exports = navigator && navigator.userAgent || '';


        /***/ }),
    /* 110 */
    /***/ (function(module, exports, __webpack_require__) {

        var hide = __webpack_require__(7);
        module.exports = function (target, src, safe) {
            for (var key in src) {
                if (safe && target[key]) target[key] = src[key];
                else hide(target, key, src[key]);
            } return target;
        };


        /***/ }),
    /* 111 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var global = __webpack_require__(1);
        var core = __webpack_require__(0);
        var dP = __webpack_require__(8);
        var DESCRIPTORS = __webpack_require__(9);
        var SPECIES = __webpack_require__(2)('species');

        module.exports = function (KEY) {
            var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function () { return this; }
            });
        };


        /***/ }),
    /* 112 */
    /***/ (function(module, exports, __webpack_require__) {

        var ITERATOR = __webpack_require__(2)('iterator');
        var SAFE_CLOSING = false;

        try {
            var riter = [7][ITERATOR]();
            riter['return'] = function () { SAFE_CLOSING = true; };

            Array.from(riter, function () { throw 2; });
        } catch (e) { /* empty */ }

        module.exports = function (exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7];
                var iter = arr[ITERATOR]();
                iter.next = function () { return { done: safe = true }; };
                arr[ITERATOR] = function () { return iter; };
                exec(arr);
            } catch (e) { /* empty */ }
            return safe;
        };


        /***/ }),
    /* 113 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var $export = __webpack_require__(4);
        var core = __webpack_require__(0);
        var global = __webpack_require__(1);
        var speciesConstructor = __webpack_require__(59);
        var promiseResolve = __webpack_require__(62);

        $export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
            var C = speciesConstructor(this, core.Promise || global.Promise);
            var isFunction = typeof onFinally == 'function';
            return this.then(
                isFunction ? function (x) {
                    return promiseResolve(C, onFinally()).then(function () { return x; });
                } : onFinally,
                isFunction ? function (e) {
                    return promiseResolve(C, onFinally()).then(function () { throw e; });
                } : onFinally
            );
        } });


        /***/ }),
    /* 114 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var $export = __webpack_require__(4);
        var newPromiseCapability = __webpack_require__(44);
        var perform = __webpack_require__(61);

        $export($export.S, 'Promise', { 'try': function (callbackfn) {
            var promiseCapability = newPromiseCapability.f(this);
            var result = perform(callbackfn);
            (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
            return promiseCapability.promise;
        } });


        /***/ }),
    /* 115 */,
    /* 116 */,
    /* 117 */,
    /* 118 */,
    /* 119 */,
    /* 120 */,
    /* 121 */,
    /* 122 */,
    /* 123 */,
    /* 124 */,
    /* 125 */,
    /* 126 */,
    /* 127 */,
    /* 128 */,
    /* 129 */,
    /* 130 */,
    /* 131 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var _promise = __webpack_require__(43);

        var _promise2 = _interopRequireDefault(_promise);

        var _regenerator = __webpack_require__(58);

        var _regenerator2 = _interopRequireDefault(_regenerator);

        var _asyncToGenerator2 = __webpack_require__(63);

        var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

        var _assign = __webpack_require__(38);

        var _assign2 = _interopRequireDefault(_assign);

        var _stringify = __webpack_require__(18);

        var _stringify2 = _interopRequireDefault(_stringify);

        var _commonUtils = __webpack_require__(19);

        var _contentUtils = __webpack_require__(132);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }





        $(function () {
            var globalVal = {
                product: {
                    productType: 1,
                    hasConsole: false,
                    oldVersion: true
                },
                info: {
                    commonFunList: null,
                    hashArgs: null,
                    location: {}
                },
                port: {
                    batch: null,
                    auto: null,
                    autoCode: null,
                    normal: null
                },
                fun: {
                    interval: null,
                    interval1: null
                }


            };var dom = document.getElementById("plug-inner-script");

            var meta = false;
            try {
                meta = $('meta[name="author"]')[0].content == '广州银云信息科技有限公司';
            } catch (e) {}

            if (meta) {
                if (dom) {
                    dom.innerHTML = "window.plug = {type: 'application/eolinker',version:401}";
                } else {
                    var newScript = document.createElement("script");
                    newScript.innerHTML = "window.plug = {type: 'application/eolinker',version:401}";
                    var firstScript = document.getElementsByTagName("script")[0];
                    firstScript.parentNode.insertBefore(newScript, firstScript);
                }
            }

            function initFun() {
                window.sessionStorage.clear();
                clearInterval(globalVal.fun.interval);
                clearInterval(globalVal.fun.interval1);
                $(document).off('click');
                try {
                    if (globalVal.port.auto) {
                        globalVal.port.auto.disconnect();
                    }
                    if (globalVal.port.batch) {
                        globalVal.port.batch.disconnect();
                    }
                    if (globalVal.port.autoCode) {
                        globalVal.port.autoCode.disconnect();
                    }
                    if (globalVal.port.normal) {
                        globalVal.port.normal.disconnect();
                    }
                } catch (e) {
                    console.log(e);
                }
            }

            function InitState() {




                if (meta) {
                    globalVal.product.productType = _contentUtils.CONTENT_TOOLS.judgePlatform();
                    switch (Number(globalVal.product.productType)) {
                        case 1:
                        {}
                        case 2:
                        {
                            globalVal.product.oldVersion = _contentUtils.CONTENT_TOOLS.getVersison() > 20180717 ? false : true;
                            break;
                        }
                        default:
                        {
                            globalVal.product.oldVersion = true;
                        }
                    }
                    if (globalVal.product.productType) {
                        globalVal.info.hashArgs = _contentUtils.CONTENT_TOOLS.getHashStringArgs();
                        globalVal.info.location = window.location;

                        var testType = _contentUtils.CONTENT_TOOLS.judgeWhichTest(globalVal.product.productType);
                        if (testType) {
                            if (!globalVal.product.hasConsole) {
                                globalVal.product.hasConsole = true;
                                console.log("%c   welcome,eolinker_extension", "font-size:14px;color:#4caf50;font-weight:bold;background:url('https://www.eolinker.com/assets/images/favicon.ico') no-repeat;background-size:14px;background-position:top left;");
                            }
                            if (/(\/home\/project\/inside\/api\/test)|(\/inside\/api\/case)|(\/inside\/quickTest)|(automatic\/inside\/cenario)|(\/inside\/test\/admin\/\?)/i.test(globalVal.info.location.href)) {
                                getFunctionDataList();
                            } else if (/\/share\/project\/test/i.test(globalVal.info.location.href) && globalVal.info.hashArgs.productType == 1 || globalVal.product.productType == 2) {
                                getFunctionDataList();
                            }
                        }
                        switch (testType) {
                            case 'normal':
                            {
                                normalTest();
                                break;
                            }
                            case 'case':
                            {
                                batchTest();
                                break;
                            }
                            case 'auto':
                            {
                                autoTest();
                                break;
                            }
                            case 'autoCode':
                            case 'envCase':
                            {
                                autoCodeTest();
                                break;
                            }
                            case 'autoBatch':
                            {
                                batchAutoTest();
                                break;
                            }
                            case 'share':
                            {
                                normalTest('share');
                                break;
                            }
                        }
                    }
                }
            }

            function normalTest(type) {
                initFun();
                var isProcess = false;




                function clock() {
                    if ($('.send-btn').length > 0) {
                        window.clearInterval(globalVal.fun.interval);
                        $('.send-btn').on("click", function () {
                            function addTestHistory(time, requestInfo, resultInfo) {
                                if (globalVal.product.productType != 0) {
                                    try {
                                        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                                        var apiUrl = '';
                                        resultInfo = JSON.parse(resultInfo);
                                        switch (Number(globalVal.product.productType)) {
                                            case 1:
                                            {
                                                if (globalVal.info.location.hash.indexOf('quickTest') > -1 && !globalVal.info.hashArgs.apiID) {
                                                    apiUrl = "apiManagementPro/QuickTest/addTestHistory";
                                                } else {
                                                    apiUrl = 'apiManagementPro/Test/addTestHistory';
                                                }
                                                break;
                                            }
                                            case 2:
                                            {
                                                location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                                                if (globalVal.info.location.hash.indexOf('quickTest') > -1 && !globalVal.info.hashArgs.apiID) {
                                                    apiUrl = "index.php/apiManagementPro/QuickTest/addTestHistory";
                                                } else {
                                                    apiUrl = 'index.php/apiManagementPro/Test/addTestHistory';
                                                }
                                            }
                                        }
                                        var requestData = {
                                            apiProtocol: "0",
                                            URL: resultInfo.requestBody.url,
                                            headers: resultInfo.requestBody.historyHeaders,
                                            requestType: resultInfo.requestBody.params.requestType,
                                            params: resultInfo.requestBody.historyParams,
                                            method: _commonUtils.COMMON_TOOLS.judgeRequestMethod(requestInfo.requestInfo.apiRequestType),
                                            methodType: requestInfo.requestInfo.apiRequestType
                                        };
                                        var responseData = {
                                            headers: resultInfo.testResult.headers,
                                            body: resultInfo.testResult.body,
                                            httpCode: resultInfo.testHttpCode,
                                            testDeny: resultInfo.testDeny
                                        };
                                        $.ajax({
                                            url: location + apiUrl,
                                            method: 'POST',
                                            contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                            data: {
                                                companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                apiID: globalVal.info.hashArgs.apiID,
                                                testTime: time,
                                                requestInfo: (0, _stringify2.default)(requestData),
                                                resultInfo: (0, _stringify2.default)(responseData),
                                                beforeInject: requestInfo.script.before,
                                                afterInject: requestInfo.script.after
                                            }
                                        }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {});
                                    } catch (e) {
                                        console.log(e);
                                    }
                                }
                            }
                            if (!isProcess) {

                                globalVal.port.normal = chrome.runtime.connect({
                                    name: "normalTest"
                                });
                                var data = window.sessionStorage.getItem('plug-normalTest-info') || $("#plug-in-js").text();
                                if (data) {
                                    isProcess = true;
                                    data = JSON.parse(data);
                                    data.commonFunList = globalVal.info.commonFunList;
                                    data.productType = globalVal.product.productType;
                                    data.oldVersion = globalVal.product.oldVersion;
                                    var time = _contentUtils.CONTENT_TOOLS.getTime();
                                    globalVal.port.normal.postMessage(data);
                                    globalVal.port.normal.onMessage.addListener(function (request, sender, sendResponse) {
                                        if (isProcess) {
                                            var webResult = $("#plug-in-result-js");
                                            if (request.statusCode == "210000") {
                                                console.log("请求发送失败，请正确填写接口信息");
                                            }
                                            window.sessionStorage.setItem('plug-background-result', request.backResult);
                                            if (globalVal.product.productType == 0 || globalVal.product.productType == 3) {

                                                webResult.text(request.backResult);
                                            } else {
                                                webResult.text(1);
                                            }
                                            isProcess = false;
                                            var statusCode = JSON.parse(request.backResult).statusCode;
                                            if (statusCode == "000000" && type != 'share') {
                                                addTestHistory(time, data, request.backResult);
                                            }
                                        }
                                    });
                                }
                            } else {
                                isProcess = false;
                                globalVal.port.normal.postMessage({
                                    stopStatus: true
                                });
                            }
                        });
                    }
                }
                globalVal.fun.interval = setInterval(clock, 100);
            }

            function batchTest() {

                initFun();
                var plugDate = {
                    responseList: [],
                    status: "tested"
                };
                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                var apiUrl = 'apiManagementPro/TestCase/addTestHistory';
                var isBreak = false;
                switch (Number(globalVal.product.productType)) {
                    case 1:
                    {

                        apiUrl = 'apiManagementPro/TestCase/addTestHistory';
                        break;
                    }
                    default:
                    {

                        location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                        apiUrl = 'index.php/apiManagementPro/TestCase/addTestHistory';
                    }
                }





                function clock() {
                    var data = $('#plug-batch-in-js').text();
                    try {
                        data = JSON.parse(data);
                    } catch (e) {}
                    if (data.env) {
                        $(document).on('click', '.batch-test-btn', function () {
                            isBreak = false;
                            var btnSend = $('.batch-test-btn');
                            var index = btnSend.index($(this));
                            var webResult = $("#plug-batch-in-result-js");

                            if ($(this).attr('testing') == 'true') {

                                globalVal.port.batch = chrome.runtime.connect({
                                    name: "batchTest"
                                });

                                var content = JSON.parse($('#plug-batch-in-js').text());
                                var data = {};
                                if (index == 0) {

                                    data = content;
                                } else {
                                    data.caseList = [content.caseList[index - 1]];
                                    data.env = content.env;
                                }
                                data.commonFunList = globalVal.info.commonFunList;
                                data.index = index;
                                data.amount = content.caseList.length;
                                data.productType = globalVal.product.productType;
                                data.oldVersion = globalVal.product.oldVersion;
                                globalVal.port.batch.postMessage(data);
                                globalVal.port.batch.onMessage.addListener(function (backResult) {
                                    for (i = 0; i < content.caseList.length; i++) {
                                        if (backResult.responseList[i] != null) {} else {
                                            backResult.responseList[i] = null;
                                        }
                                    }
                                    if (index == 0) {

                                        for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                            if (backResult.responseList[i] == null) {
                                                backResult.status = 'testing';
                                            }
                                        }
                                        window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                        plugDate = {
                                            responseList: [],
                                            status: backResult.status
                                        };
                                        webResult.text((0, _stringify2.default)(plugDate));
                                        plugDate = {
                                            responseList: [],
                                            status: "tested"
                                        };
                                    } else {

                                        plugDate.responseList[index - 1] = backResult.responseList[index - 1];
                                        for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                            if (!plugDate.responseList[i]) {
                                                plugDate.responseList[i] = null;
                                            }
                                        }
                                        window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                        plugDate = {
                                            responseList: [],
                                            status: backResult.status
                                        };
                                        webResult.text((0, _stringify2.default)(plugDate));
                                    }
                                    if (backResult.status == 'tested' && !isBreak) {
                                        var result = [];
                                        if (index == 0) {
                                            content.caseList.forEach(function (val, key) {
                                                result.push({
                                                    caseID: val.caseID,
                                                    result: backResult.responseList[key]
                                                });
                                            });
                                        } else {
                                            result = [{
                                                caseID: content.caseList[index - 1].caseID,
                                                result: backResult.responseList[index - 1]
                                            }];
                                        }
                                        $.ajax({
                                            url: location + apiUrl,
                                            method: 'POST',
                                            contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                            data: {
                                                companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                apiID: globalVal.info.hashArgs.apiID,
                                                result: (0, _stringify2.default)(result)
                                            }
                                        }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {});
                                    }
                                });
                            } else {
                                isBreak = true;
                                globalVal.port.batch.postMessage({
                                    index: index,
                                    stopStatus: true
                                });

                            };
                        });
                        window.clearInterval(globalVal.fun.interval);
                    }
                }
                globalVal.fun.interval = setInterval(clock, 100);
            }

            function autoTest() {

                initFun();
                if (!globalVal.info.commonFunList) {
                    getFunctionDataList();
                }
                var plugDate = {
                    responseList: [],
                    status: "tested"
                };
                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                var apiUrl = 'automatedTest/AutomatedTestCaseSingle/getSingleCaseList';
                var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                var content = {};
                var beforeCaseList = false;
                var changeFlagePrevious = 0;
                var isBreak = false;




                switch (Number(globalVal.product.productType)) {
                    case 0:
                    {
                        location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                        apiUrl = 'server/index.php?g=Web&c=AutomatedTestCaseSingle&o=getSingleTestCaseList';
                        break;
                    }
                    case 1:
                    {

                        apiUrl = 'automatedTest/AutomatedTestCaseSingle/getSingleCaseList';
                        apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                        break;
                    }
                    case 3:
                    {
                        location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.html$/i, '');
                        apiUrl = 'AutomatedTestCaseSingle/getSingleTestCaseList';
                        break;
                    }
                    default:
                    {

                        location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                        apiUrl = 'index.php/apiManagementPro/AutomatedTestCaseSingle/getSingleCaseList';
                        apiUrl1 = 'index.php/apiManagementPro/AutomatedTestHistory/addTestLog';
                    }
                }

                function getSingleCaseList() {

                    $.ajax({
                        url: location + apiUrl,
                        method: 'POST',
                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                        data: {
                            companyHashKey: globalVal.info.hashArgs.companyHashKey,
                            projectHashKey: globalVal.info.hashArgs.projectHashKey,
                            caseID: globalVal.info.hashArgs.caseID,
                            projectID: globalVal.info.hashArgs.projectID
                        }
                    }).done(function (successData, textStatus, xhr) {
                        try {
                            content = JSON.parse(successData);
                        } catch (e) {
                            content = successData;
                        }
                    }).fail(function (xhr, textStatus) {});
                }
                getSingleCaseList();


                function queryBtn() {
                    function query() {
                        var btnSend = $('button.batch-test-btn');

                        $('#automated-text').unbind('DOMCharacterDataModified');
                        $('#automated-text').bind('DOMCharacterDataModified', function (e) {
                            var webContent = JSON.parse($("#automated-text").text());
                            if (changeFlagePrevious != webContent.flag) {
                                getSingleCaseList();
                                changeFlagePrevious = webContent.flag;
                            }
                        });
                        if (content != undefined && content.singCaseList != undefined && content.singCaseList.length == btnSend.length - 1) {
                            clearInterval(globalVal.fun.interval);

                            $('.batch-test-btn').off('click');
                            $('.batch-test-btn').on('click', function () {
                                var btnSend = $('.batch-test-btn');
                                var webResult = $('#plug-batch-in-result-js');
                                var index = btnSend.index($(this));
                                var caseList = {};
                                var env = JSON.parse($("#automated-text").text()).env;

                                if ($(this).attr('testing') == 'true') {
                                    isBreak = false;

                                    globalVal.port.auto = chrome.runtime.connect({
                                        name: "autoTest"
                                    });

                                    var data = {};
                                    if (index == 0) {

                                        caseList.caseData = content.singCaseList;
                                    } else {
                                        caseList.caseData = [content.singCaseList[index - 1]];
                                    }
                                    caseList.productType = globalVal.product.productType;
                                    caseList.oldVersion = globalVal.product.oldVersion;
                                    caseList.beforeCase = {
                                        caseCodeList: content.beforeCaseList || false,
                                        env: env,
                                        commonFunList: globalVal.info.commonFunList,
                                        productType: globalVal.product.productType,
                                        oldVersion: globalVal.product.oldVersion
                                    };
                                    caseList.afterCase = {
                                        caseCodeList: content.afterCaseList || false,
                                        env: env,
                                        commonFunList: globalVal.info.commonFunList,
                                        productType: globalVal.product.productType,
                                        oldVersion: globalVal.product.oldVersion
                                    };
                                    caseList.index = index;
                                    caseList.amount = content.singCaseList.length;
                                    caseList.env = env;
                                    caseList.commonFunList = globalVal.info.commonFunList;
                                    globalVal.port.auto.postMessage(caseList);
                                    globalVal.port.auto.onMessage.addListener(function (backResult) {
                                        if (backResult.afterCaseReportList.length == 0) {

                                            for (i = 0; i < content.singCaseList.length; i++) {
                                                if (backResult.responseList[i] != null) {} else {
                                                    backResult.responseList[i] = null;
                                                }
                                            }
                                        }
                                        if (!content.afterCaseList) {
                                            content.afterCaseList = [];
                                        }
                                        if (index == 0) {
                                            if (content.afterCaseList.length == 0) {
                                                for (var i = 0; i < backResult.responseList.length; i++) {


                                                    if (backResult.responseList[i] == null) {
                                                        backResult.status = 'testing';
                                                    } else if (backResult.responseList[i].isStopTest) {
                                                        backResult.status = 'tested';
                                                        break;
                                                    }
                                                }
                                            } else {

                                                if (backResult.afterCaseReportList.length != content.afterCaseList.length) {
                                                    backResult.status = 'testing';
                                                }
                                            }
                                            window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                            plugDate = {
                                                responseList: [],
                                                status: backResult.status
                                            };
                                            webResult.text((0, _stringify2.default)(plugDate));
                                            plugDate = {
                                                responseList: [],
                                                status: "tested"
                                            };
                                        } else {
                                            if (content.afterCaseList.length == 0) {


                                                if (backResult.responseList[index] == null) {
                                                    backResult.status = 'testing';
                                                }
                                            } else {

                                                if (backResult.afterCaseReportList.length != content.afterCaseList.length) {
                                                    backResult.status = 'testing';
                                                }
                                            }

                                            plugDate.responseList[index - 1] = backResult.responseList[index - 1];
                                            for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                                if (!plugDate.responseList[i]) {
                                                    plugDate.responseList[i] = null;
                                                }
                                            }
                                            window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                            plugDate = {
                                                responseList: [],
                                                status: backResult.status
                                            };
                                            webResult.text((0, _stringify2.default)(plugDate));
                                        }
                                        if (!isBreak && (globalVal.product.productType == 1 || globalVal.product.productType == 2) && backResult.status == 'tested' && index == 0) {

                                            isBreak = true;
                                            $.ajax({
                                                url: location + apiUrl1,
                                                method: 'POST',
                                                contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                data: {
                                                    caseID: globalVal.info.hashArgs.caseID,
                                                    companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                    projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                    result: (0, _stringify2.default)(backResult)
                                                }
                                            }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                isBreak = false;
                                                console.log('添加历史记录失败');
                                            });
                                        }
                                    });
                                } else {
                                    isBreak = true;
                                    globalVal.port.auto.postMessage({
                                        index: index,
                                        stopStatus: true
                                    });
                                }
                            });
                        }
                    }
                    globalVal.fun.interval = setInterval(query, 500);
                }
                queryBtn();
            }

            function autoCodeTest() {

                initFun();
                if (!globalVal.info.commonFunList) {
                    getFunctionDataList();
                }
                var plugDate = {
                    responseList: [],
                    status: "tested"
                };
                var content = {};
                var changeFlagePrevious = 0;
                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                var isBreak = false;




                if (globalVal.product.productType == 0) {
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                } else if (globalVal.product.productType == 1) {

                    apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                } else {

                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl1 = 'index.php/apiManagementPro/AutomatedTestHistory/addTestLog';
                }

                function queryBtn() {
                    function query() {
                        var btnSend = $('button.batch-test-btn');
                        if (btnSend.length != 0) {
                            clearInterval(globalVal.fun.interval);
                            $('.batch-test-btn').off('click');

                            $('.batch-test-btn').on('click', function () {
                                isBreak = false;
                                var content = window.sessionStorage.getItem('plug-autoTest-code');
                                var btnSend = $('.batch-test-btn');
                                var caseCodeList = {};
                                var webResult = $("#plug-batch-in-result-js");
                                content = JSON.parse(content);

                                if ($(this).attr('testing') == 'true') {

                                    globalVal.port.autoCode = chrome.runtime.connect({
                                        name: "autoCodeTest"
                                    });

                                    caseCodeList.caseCode = content.caseCode;
                                    caseCodeList.beforeCase = {
                                        caseCodeList: content.beforeCaseList || false,
                                        env: content.env,
                                        commonFunList: globalVal.info.commonFunList,
                                        oldVersion: globalVal.product.oldVersion

                                    };
                                    caseCodeList.afterCase = {
                                        caseCodeList: content.afterCaseList || false,
                                        env: content.env,
                                        commonFunList: globalVal.info.commonFunList,
                                        oldVersion: globalVal.product.oldVersion
                                    };
                                    caseCodeList.productType = globalVal.product.productType;
                                    caseCodeList.oldVersion = globalVal.product.oldVersion;
                                    caseCodeList.env = content.env;
                                    caseCodeList.commonFunList = globalVal.info.commonFunList;
                                    globalVal.port.autoCode.postMessage(caseCodeList);
                                    globalVal.port.autoCode.onMessage.addListener(function (backResult) {
                                        window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                        plugDate = {
                                            status: 'tested'
                                        };
                                        webResult.text((0, _stringify2.default)(plugDate));
                                        if (!isBreak && (globalVal.product.productType == 1 || globalVal.product.productType == 2) && globalVal.info.location.hash.indexOf('proInside/test/admin/mode/advanced') > -1 || globalVal.info.location.hash.indexOf('automatic/inside/cenario/mode/advanced') > -1) {
                                            isBreak = true;
                                            $.ajax({
                                                url: location + apiUrl1,
                                                method: 'POST',
                                                contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                data: {
                                                    caseID: globalVal.info.hashArgs.caseID,
                                                    companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                    projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                    result: (0, _stringify2.default)(backResult)
                                                }
                                            }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                isBreak = false;
                                                console.log('添加历史记录失败');
                                            });
                                        }
                                    });
                                } else {

                                    isBreak = true;
                                    globalVal.port.autoCode.postMessage({
                                        stopStatus: true
                                    });
                                }
                            });
                        }
                    }
                    globalVal.fun.interval = setInterval(query, 500);
                }
                queryBtn();
            }

            function batchAutoTest() {
                initFun();
                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                var apiUrl = 'automatedTest/AutomatedTestCase/getTestCaseList';
                var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestHistory';
                var apiUrl2 = 'automatedTest/AutomatedTestHistory/addTestLog';
                var content = null;
                var changeFlagePrevious = 0;
                var ajaxStatus = false;
                if (globalVal.product.productType == 0) {

                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                    apiUrl = 'server/index.php?g=Web&c=AutomatedTestCase&o=getTestCaseDataList';
                } else if (globalVal.product.productType == 1) {

                    apiUrl = 'automatedTest/AutomatedTestCase/getTestCaseDataList';
                    apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestHistory';
                } else if (globalVal.product.productType == 3) {

                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.html$/i, '');
                    apiUrl = 'AutomatedTestCase/getTestCaseDataList';
                } else {

                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl = 'index.php/apiManagementPro/AutomatedTestCase/getTestCaseDataList';
                    apiUrl2 = 'index.php/apiManagementPro/AutomatedTestHistory/addTestLog';
                    apiUrl1 = 'index.php/apiManagementPro/AutomatedTestHistory/addTestHistory';
                }

                function getBatchData(which, data, index, env) {
                    switch (which.toString()) {
                        case '0':
                        {
                            return {
                                caseData: data.singleCaseList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion,
                                index: 0,
                                batchIndex: index,
                                amount: data.singleCaseList.length,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                beforeCase: {
                                    caseCodeList: data.beforeCaseList || false,
                                    env: env,
                                    commonFunList: globalVal.info.commonFunList,
                                    productType: globalVal.product.productType,
                                    oldVersion: globalVal.product.oldVersion
                                },
                                afterCase: {
                                    caseCodeList: data.afterCaseList || false,
                                    env: env,
                                    commonFunList: globalVal.info.commonFunList,
                                    productType: globalVal.product.productType,
                                    oldVersion: globalVal.product.oldVersion
                                }
                            };
                            break;
                        }
                        default:
                        {
                            return {
                                caseCode: data.caseCode,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion,
                                env: env,
                                batchIndex: index,
                                commonFunList: globalVal.info.commonFunList,
                                beforeCase: {
                                    caseCodeList: data.beforeCaseList || false,
                                    env: env,
                                    commonFunList: globalVal.info.commonFunList,
                                    productType: globalVal.product.productType,
                                    oldVersion: globalVal.product.oldVersion
                                },
                                afterCase: {
                                    caseCodeList: data.afterCaseList || false,
                                    env: env,
                                    commonFunList: globalVal.info.commonFunList,
                                    productType: globalVal.product.productType,
                                    oldVersion: globalVal.product.oldVersion
                                }
                            };
                        }
                    }
                }

                function getBatchAutoTest(orderBy, asc, connID, condition, keyWord) {
                    content = null;
                    var request = {
                        companyHashKey: globalVal.info.hashArgs.companyHashKey,
                        projectHashKey: globalVal.info.hashArgs.projectHashKey,
                        projectID: globalVal.info.hashArgs.projectID,
                        orderBy: orderBy,
                        asc: asc,
                        keyWord: keyWord,
                        condition: condition,
                        connID: connID || null,
                        groupID: -1
                    };
                    request.groupID = globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID'];
                    $.ajax({
                        url: location + apiUrl,
                        method: 'POST',
                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                        data: request
                    }).done(function (successData, textStatus, xhr) {
                        try {
                            successData = JSON.parse(successData);
                        } catch (e) {}
                        if (successData.statusCode == '000000') {
                            try {
                                content = JSON.parse(successData).caseList;
                            } catch (e) {
                                content = successData.caseList;
                            }
                        } else {
                            content = [];
                        }
                    }).fail(function (xhr, textStatus) {});
                }







                var report = {
                    time: '0ms',
                    totalCase: 0,
                    successCase: 0,
                    errorCase: 0,
                    responseList: [],
                    status: 'testing'
                };
                var data = {
                    time: {
                        init: null
                    }
                };
                var fun = {};
                var isBreak = false;

                fun.queryDate = function () {
                    function query1() {
                        if ($("#automated-text").text()) {
                            try {
                                var webContent = JSON.parse($("#automated-text").text());
                                webContent.filter = webContent.filter || {};
                                clearInterval(globalVal.fun.interval1);
                                getBatchAutoTest(webContent.filter.orderBy, webContent.filter.asc, webContent.filter.connID, webContent.filter.condition, webContent.filter.search);
                            } catch (e) {}
                        }
                    }
                    globalVal.fun.interval1 = setInterval(query1, 500);
                };
                fun.queryDate();
                function queryBtn() {
                    function query() {
                        var btnSend = $('button.batch-test-btn');
                        var patt = /home\/project\/inside\/test\/default\?/i;

                        var filterContent = null;
                        if (content !== null) {
                            filterContent = (0, _assign2.default)([], content);
                        }
                        $('#automated-text').unbind('DOMCharacterDataModified');
                        $('#automated-text').bind('DOMCharacterDataModified', function (e) {
                            var webContent = JSON.parse($("#automated-text").text());
                            if (content !== null) {
                                filterContent = [];
                            } else {
                                filterContent = null;
                            }
                            webContent.filter = webContent.filter || {};
                            if (changeFlagePrevious != webContent.flag) {
                                getBatchAutoTest(webContent.filter.orderBy, webContent.filter.asc, webContent.filter.connID, webContent.filter.condition, webContent.filter.search);
                                queryBtn();
                                changeFlagePrevious = webContent.flag;
                            } else if (webContent.filter.search) {
                                content.forEach(function (val, key) {
                                    if (val.caseName.indexOf(webContent.filter.search) > -1) {
                                        filterContent.push(val);
                                    }
                                });
                            }
                        });
                        fun.removeListener = function (callback) {
                            if (callback) {
                                globalVal.port.autoCode.onMessage.removeListener(callback);
                                globalVal.port.auto.onMessage.removeListener(callback);
                            }
                        };
                        if (filterContent != null && filterContent.length == btnSend.length - 2 || filterContent != null && patt.test(globalVal.info.location.href) && btnSend.length == 1) {
                            clearInterval(globalVal.fun.interval);

                            $('.batch-test-btn').off('click');
                            $('.batch-test-btn').on('click', function () {
                                var webResult = $("#plug-batch-in-result-js");
                                if ($(this).attr('testing') == 'true') {
                                    var index = $('button.batch-test-btn').index($(this));

                                    var index1 = $('a.batch-test-btn').index($(this));
                                    var isAsync = true;

                                    if (index == 0 || index1 == 1 || globalVal.product.productType == 0) {

                                        isAsync = true;
                                    } else {
                                        isAsync = false;
                                    }
                                    if (index == 1 || index == -1) {
                                        index = 0;
                                    }
                                    isBreak = false;
                                    report = {
                                        time: '0ms',
                                        totalCase: 0,
                                        successCase: 0,
                                        errorCase: 0,
                                        responseList: [],
                                        status: 'testing'
                                    };
                                    var plugDate = {
                                        responseList: [],
                                        status: "testing"
                                    };
                                    var env = JSON.parse($("#automated-text").text()).env;
                                    report.totalCase = filterContent.length;

                                    globalVal.port.autoCode = chrome.runtime.connect({
                                        name: "autoCodeTest"
                                    });
                                    globalVal.port.auto = chrome.runtime.connect({
                                        name: "autoTest"
                                    });
                                    report.responseList = new Array(report.totalCase);
                                    data.time.init = new Date();
                                    var batchList = [];
                                    if (index == 0) {
                                        batchList = filterContent;
                                    } else {
                                        batchList.push(filterContent[index - 2]);
                                    }
                                    switch (isAsync) {
                                        case false:
                                        {

                                            var asyncControl = function () {
                                                var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                                    var i;
                                                    return _regenerator2.default.wrap(function _callee$(_context) {
                                                        while (1) {
                                                            switch (_context.prev = _context.next) {
                                                                case 0:
                                                                    i = 0;

                                                                case 1:
                                                                    if (!(i < batchList.length)) {
                                                                        _context.next = 9;
                                                                        break;
                                                                    }

                                                                    if (!isBreak) {
                                                                        _context.next = 4;
                                                                        break;
                                                                    }

                                                                    return _context.abrupt('break', 9);

                                                                case 4:
                                                                    _context.next = 6;
                                                                    return Synchronization(batchList, i);

                                                                case 6:
                                                                    i++;
                                                                    _context.next = 1;
                                                                    break;

                                                                case 9:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    }, _callee, this);
                                                }));

                                                return function asyncControl() {
                                                    return _ref.apply(this, arguments);
                                                };
                                            }();

                                            var Synchronization = function Synchronization(batchList, i) {
                                                return new _promise2.default(function (resolve, reject) {
                                                    switch (batchList[i].caseType.toString()) {
                                                        case '1':
                                                        {

                                                            var caseCodeList = getBatchData('1', batchList[i], i, env);
                                                            globalVal.port.autoCode.postMessage(caseCodeList);
                                                            break;
                                                        }
                                                        case '0':
                                                        {

                                                            var caseList = getBatchData('0', batchList[i], i, env);
                                                            globalVal.port.auto.postMessage(caseList);
                                                            break;
                                                        }
                                                    }

                                                    fun.removeListener(fun.callback);
                                                    fun.callback = function (backResult) {
                                                        if (!isBreak) {
                                                            var isEnd = true;
                                                            if (index == 0) {
                                                                report.time = (new Date() - data.time.init) / 1000 + 's';
                                                                backResult.caseName = filterContent[backResult.batchIndex].caseName;
                                                                backResult.caseID = filterContent[backResult.batchIndex].caseID;
                                                                backResult.caseType = filterContent[backResult.batchIndex].caseType;
                                                                report.responseList[backResult.batchIndex] = backResult;

                                                                for (i = 0; i < filterContent.length; i++) {
                                                                    if (report.responseList[i] != null) {} else {
                                                                        report.responseList[i] = null;
                                                                    }
                                                                }
                                                                for (var i = 0; i < report.responseList.length; i++) {

                                                                    if (report.responseList[i] == null) {
                                                                        isEnd = false;
                                                                    }
                                                                }
                                                                if (isEnd == true) {
                                                                    plugDate.status = 'tested';
                                                                    report.status = 'tested';
                                                                }
                                                                if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                                    report.successCase++;
                                                                } else {
                                                                    report.errorCase++;
                                                                }
                                                                window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                                webResult.text((0, _stringify2.default)(plugDate));
                                                                resolve('success');
                                                                var patt = /home\/project\/inside\/test\/default\?/i;
                                                                if (isEnd == true && (globalVal.product.productType == 1 || globalVal.product.productType == 2) && !patt.test(globalVal.info.location.href)) {
                                                                    $.ajax({
                                                                        url: location + apiUrl1,
                                                                        method: 'POST',
                                                                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                                        data: {
                                                                            companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                            projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                            result: (0, _stringify2.default)(report),
                                                                            groupID: globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID']

                                                                        }
                                                                    }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                                        console.log('添加历史记录失败');
                                                                    });
                                                                }
                                                            } else {
                                                                report.time = (new Date() - data.time.init) / 1000 + 's';
                                                                report.responseList = [backResult];
                                                                report.status = 'tested';
                                                                if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                                    report.successCase++;
                                                                } else {
                                                                    report.errorCase++;
                                                                }
                                                                window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                                plugDate.status = 'tested';
                                                                webResult.text((0, _stringify2.default)(plugDate));
                                                                resolve('success');

                                                                if (globalVal.product.productType == 1 || globalVal.product.productType == 2) {
                                                                    $.ajax({
                                                                        url: location + apiUrl2,
                                                                        method: 'POST',
                                                                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                                        data: {
                                                                            caseID: batchList[0].caseID,
                                                                            companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                            projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                            result: (0, _stringify2.default)(backResult)
                                                                        }
                                                                    }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                                        console.log('添加历史记录失败');
                                                                    });
                                                                }
                                                            }
                                                        }
                                                    };
                                                    globalVal.port.autoCode.onMessage.addListener(fun.callback);
                                                    globalVal.port.auto.onMessage.addListener(fun.callback);
                                                });
                                            };

                                            asyncControl().then(function () {}).catch(function (e) {
                                                console.log(e);
                                            });
                                            break;
                                        }
                                        default:
                                        {

                                            for (var i = 0; i < batchList.length; i++) {
                                                if (isBreak) break;
                                                switch (batchList[i].caseType.toString()) {
                                                    case '1':
                                                    {

                                                        var caseCodeList = getBatchData('1', batchList[i], i, env);
                                                        globalVal.port.autoCode.postMessage(caseCodeList);
                                                        break;
                                                    }
                                                    case '0':
                                                    {

                                                        var caseList = getBatchData('0', batchList[i], i, env);
                                                        globalVal.port.auto.postMessage(caseList);
                                                        break;
                                                    }
                                                }
                                            }
                                            fun.removeListener(fun.callback);
                                            fun.callback = function (backResult) {
                                                if (!isBreak) {
                                                    if (index == 0) {
                                                        report.time = (new Date() - data.time.init) / 1000 + 's';
                                                        backResult.caseName = filterContent[backResult.batchIndex].caseName;
                                                        backResult.caseID = filterContent[backResult.batchIndex].caseID;
                                                        backResult.caseType = filterContent[backResult.batchIndex].caseType;
                                                        report.responseList[backResult.batchIndex] = backResult;
                                                        var isEnd = true;

                                                        for (i = 0; i < filterContent.length; i++) {
                                                            if (report.responseList[i] != null) {} else {
                                                                report.responseList[i] = null;
                                                            }
                                                        }
                                                        for (var i = 0; i < report.responseList.length; i++) {

                                                            if (report.responseList[i] == null) {
                                                                isEnd = false;
                                                            }
                                                        }
                                                        if (isEnd == true) {
                                                            plugDate.status = 'tested';
                                                            report.status = 'tested';
                                                        }
                                                        if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                            report.successCase++;
                                                        } else {
                                                            report.errorCase++;
                                                        }
                                                        window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                        webResult.text((0, _stringify2.default)(plugDate));
                                                        var patt = /home\/project\/inside\/test\/default\?/i;
                                                        if (isEnd == true && (globalVal.product.productType == 1 || globalVal.product.productType == 2) && !patt.test(globalVal.info.location.href)) {
                                                            $.ajax({
                                                                url: location + apiUrl1,
                                                                method: 'POST',
                                                                contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                                data: {
                                                                    companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                    projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                    result: (0, _stringify2.default)(report),
                                                                    groupID: globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID']

                                                                }
                                                            }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                                console.log('添加历史记录失败');
                                                            });
                                                        }
                                                    } else {
                                                        report.time = (new Date() - data.time.init) / 1000 + 's';
                                                        report.responseList = [backResult];
                                                        report.status = 'tested';
                                                        if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                            report.successCase++;
                                                        } else {
                                                            report.errorCase++;
                                                        }
                                                        window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                        plugDate.status = 'tested';
                                                        webResult.text((0, _stringify2.default)(plugDate));
                                                    }
                                                }
                                            };
                                            globalVal.port.autoCode.onMessage.addListener(fun.callback);
                                            globalVal.port.auto.onMessage.addListener(fun.callback);
                                        }
                                    }
                                } else {
                                    fun.removeListener(fun.callback);
                                    isBreak = true;

                                    report.time = (new Date() - data.time.init) / 1000 + 's';
                                    report.status = 'tested';
                                    window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                    globalVal.port.autoCode.postMessage({
                                        stopStatus: true
                                    });
                                    globalVal.port.auto.postMessage({
                                        index: 0,
                                        stopStatus: true
                                    });
                                }
                            });
                        }
                    }
                    globalVal.fun.interval = setInterval(query, 500);
                }
                queryBtn();
            }

            function getFunctionDataList() {
                var apiUrl = null;
                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                if (globalVal.product.productType != 1 && globalVal.product.productType != 2) return;
                if (globalVal.product.productType == 1) {

                    if (/\/share\/project\/test/i.test(globalVal.info.location.href) && globalVal.info.hashArgs.productType == 1) {
                        apiUrl = 'apiManagementPro/Share/getFunctionDataList';
                    } else if (/\/automatic\/inside\/cenario/i.test(globalVal.info.location.href)) {
                        apiUrl = 'automatedTest/CommonFunction/getFunctionDataList';
                    } else {
                        apiUrl = 'apiManagementPro/CommonFunction/getFunctionDataList';
                    }
                } else {

                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    if (/\/share\/project\/test/i.test(globalVal.info.location.href)) {
                        apiUrl = 'index.php/apiManagementPro/Share/getFunctionDataList';
                    } else {
                        apiUrl = 'index.php/apiManagementPro/CommonFunction/getFunctionDataList';
                    }
                }
                var request = {
                    companyHashKey: globalVal.info.hashArgs.companyHashKey,
                    projectHashKey: globalVal.info.hashArgs.projectHashKey,
                    shareCode: globalVal.info.hashArgs.shareCode,
                    shareID: globalVal.info.hashArgs.shareID
                };
                $.ajax({
                    url: location + apiUrl,
                    method: 'POST',
                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                    data: request
                }).done(function (successData, textStatus, xhr) {
                    try {
                        successData = JSON.parse(successData);
                    } catch (e) {}
                    if (successData.statusCode == '000000') {
                        try {
                            globalVal.info.commonFunList = JSON.parse(successData).functionList;
                        } catch (e) {
                            globalVal.info.commonFunList = successData.functionList;
                        }
                    } else {
                        globalVal.info.commonFunList = [];
                    }
                }).fail(function (xhr, textStatus) {});
            }
            InitState();
            window.onhashchange = InitState;
        });

        /***/ }),
    /* 132 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var CONTENT_TOOLS = exports.CONTENT_TOOLS = {
            getHashStringArgs: function getHashStringArgs() {
                var hashStrings = [],
                    hashArgs = {};
                var items = [],
                    item = null,
                    name = null,
                    value = null,
                    i = 0,
                    len = 0;
                hashStrings = window.location.hash;
                if (hashStrings.indexOf('?') > -1) {
                    items = hashStrings.split("?");
                    items = items[1].split("&");
                    len = items.length;
                    for (i = 0; i < len; i++) {
                        item = items[i].split("=");
                        name = decodeURIComponent(item[0]);
                        value = decodeURIComponent(item[1]);
                        if (name.length > 0) {
                            hashArgs[name] = value;
                        }
                    }
                }
                return hashArgs;
            },
            getVersison: function getVersison() {
                var meta = false;
                try {
                    meta = $('meta[name="version"]')[0].content;
                } catch (e) {

                }
                if (meta) {




                    return meta;
                } else {
                    return false;
                }
            },
            judgePlatform: function judgePlatform() {

                var meta = false;
                try {
                    meta = $('meta[name="product-type"]')[0].content;
                } catch (e) {

                }
                if (meta) {




                    return meta;
                } else {
                    return false;
                }
            },
            getTime: function getTime() {
                var data = {
                    fun: {
                        getTime: null
                    }
                };
                data.fun.getTime = function () {
                    var template = {
                        info: {
                            date: new Date(),
                            time: {
                                year: null,
                                month: null,
                                day: null,
                                hour: null,
                                minute: null,
                                second: null
                            },
                            string: null
                        }
                    };
                    template.info.time.year = template.info.date.getFullYear();
                    template.info.time.month = template.info.date.getMonth() + 1;
                    template.info.time.day = template.info.date.getDate();

                    template.info.time.hour = template.info.date.getHours();
                    template.info.time.minute = template.info.date.getMinutes();
                    template.info.time.second = template.info.date.getSeconds();

                    template.info.string = template.info.time.year + "-";

                    if (template.info.time.month < 10) template.info.string += "0";

                    template.info.string += template.info.time.month + "-";

                    if (template.info.time.day < 10) template.info.string += "0";

                    template.info.string += template.info.time.day + " ";

                    if (template.info.time.hour < 10) template.info.string += "0";

                    template.info.string += template.info.time.hour + ":";
                    if (template.info.time.minute < 10) template.info.string += '0';
                    template.info.string += template.info.time.minute + ":";
                    if (template.info.time.second < 10) template.info.string += '0';
                    template.info.string += template.info.time.second;
                    return template.info.string;
                };
                return data.fun.getTime();
            },
            judgeWhichTest: function judgeWhichTest(productType) {

                var version = CONTENT_TOOLS.getVersison();
                var nowUrl = window.location.href;
                var patt1 = /(\/api\/test)|(\/quickTest)/i,

                    patt2 = /\/api\/case/i,

                    patt3 = /(\/test\/api)|(\/test\/admin\/api)|(\/cenario\/api)/i,

                    patt4 = /(\/test\/mode\/advanced)|(\/test\/admin\/mode\/advanced)|(cenario\/mode\/advanced)/i,

                    patt5 = /(\/test\/admin\/\?)|(\/inside\/test\/default\?)|(\/automatic\/inside\/cenario\/\?)/i,

                    patt6 = /(\/test\/admin\/mode\/env)|(cenario\/mode\/env)/i,

                    patt7 = /\/share\/project\/test/i;
                var status1 = patt1.test(nowUrl),
                    status2 = patt2.test(nowUrl),
                    status3 = patt3.test(nowUrl),
                    status4 = patt4.test(nowUrl),
                    status5 = patt5.test(nowUrl),
                    status6 = patt6.test(nowUrl),
                    status7 = patt7.test(nowUrl);
                if (status1) {
                    return 'normal';
                } else if (status2) {
                    return 'case';
                } else if (status3) {
                    return 'auto';
                } else if (status4) {
                    return 'autoCode';
                } else if (status5) {
                    return 'autoBatch';
                } else if (status6) {
                    return 'envCase';
                } else if (status7) {
                    return 'share';
                }
            }
        };

        /***/ })
    /******/ ]);