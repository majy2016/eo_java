webpackJsonp([1],{

/***/ 130:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promise = __webpack_require__(26);

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(34);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(35);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = __webpack_require__(11);

var _assign2 = _interopRequireDefault(_assign);

var _stringify = __webpack_require__(12);

var _stringify2 = _interopRequireDefault(_stringify);

var _contentUtils = __webpack_require__(131);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }





$(function () {
    var globalVal = {
        product: {
            productType: 1,
            hasConsole: false,
            oldVersion: true
        },
        info: {
           
            prefixStr: 'index.php/',
            commonFunList: null,
            hashArgs: null,
            location: {}
        },
        port: {
            batch: null,
            auto: null,
            autoCode: null,
            normal: null
        },
        fun: {
            interval: null,
            interval1: null
        }
       
       
    };var dom = document.getElementById("plug-inner-script");
   
    var meta = false;
    try {
        var content = $('meta[name="author"]')[0].content;
        meta = content == '广州银云信息科技有限公司' || content == 'EOLINKER Co.,Ltd.';
    } catch (e) {}

    if (meta) {
        if (dom) {
            dom.innerHTML = "window.plug = {type: 'application/eolinker',version:454}";
        } else {
            var newScript = document.createElement("script");
            newScript.innerHTML = "window.plug = {type: 'application/eolinker',version:454}";
            var firstScript = document.getElementsByTagName("script")[0];
            firstScript.parentNode.insertBefore(newScript, firstScript);
        }
    }

    function initFun() {
        window.sessionStorage.removeItem("plug-background-result");
        clearInterval(globalVal.fun.interval);
        clearInterval(globalVal.fun.interval1);
        $(document).off('click');
        try {
            if (globalVal.port.auto) {
                globalVal.port.auto.disconnect();
            }
            if (globalVal.port.batch) {
                globalVal.port.batch.disconnect();
            }
            if (globalVal.port.autoCode) {
                globalVal.port.autoCode.disconnect();
            }
            if (globalVal.port.normal) {
                globalVal.port.normal.disconnect();
            }
        } catch (e) {
            console.log(e);
        }
    }

    function InitState() {
       
       
       
       
        if (meta) {
            globalVal.product.productType = _contentUtils.CONTENT_TOOLS.judgePlatform();
            switch (Number(globalVal.product.productType)) {
                case 1:
                    {
                        globalVal.product.oldVersion = false;
                        break;
                    }
                case 2:
                    {
                        globalVal.product.oldVersion = _contentUtils.CONTENT_TOOLS.getVersison() >= 20181018 ? false : true;
                        break;
                    }
                default:
                    {
                        globalVal.product.oldVersion = false;
                    }
            }
            if (globalVal.product.productType) {
                globalVal.info.hashArgs = _contentUtils.CONTENT_TOOLS.getHashStringArgs();
                globalVal.info.location = window.location;
               
                var testType = _contentUtils.CONTENT_TOOLS.judgeWhichTest(globalVal.product.productType);
                if (testType) {
                    if (!globalVal.product.hasConsole) {
                        globalVal.product.hasConsole = true;
                        console.log("%c   welcome,eolinker_extension", "font-size:14px;color:#4caf50;font-weight:bold;background:url('https://www.eolinker.com/assets/images/favicon.ico') no-repeat;background-size:14px;background-position:top left;");
                    }
                   
                    if (/(\/project\/inside\/api\/test)|(\/inside\/api\/case)|(automatic\/inside\/scene)|(automatic\/inside\/cenario)|(\/inside\/quickTest)|(\/inside\/test\/admin\/\?)/i.test(globalVal.info.location.href)) {
                        getFunctionDataList();
                    } else if (/\/share\/project\/test/i.test(globalVal.info.location.href) || globalVal.product.productType == 2) {
                        getFunctionDataList();
                    }
                }
                switch (testType) {
                    case 'normal':
                        {
                            normalTest();
                            break;
                        }
                    case 'case':
                        {
                            batchTest();
                            break;
                        }
                    case 'auto':
                        {
                            autoTest();
                            break;
                        }
                    case 'autoCode':
                    case 'envCase':
                        {
                            autoCodeTest();
                            break;
                        }
                    case 'autoBatch':
                        {
                            batchAutoTest();
                            break;
                        }
                    case 'share':
                        {
                            normalTest('share');
                            break;
                        }
                }
            }
        }
    }
   
    function normalTest(type) {
        initFun();
        var isProcess = false;

        function clock() {
            if ($('.send-btn').length > 0) {
                window.clearInterval(globalVal.fun.interval);
                $('.send-btn').on("click", function () {
                    function addTestHistory(time, requestInfo, resultInfo) {
                        if (globalVal.product.productType != 0) {
                            try {
                                var location = globalVal.info.location.origin + globalVal.info.location.pathname;
                                var apiUrl = '';
                                resultInfo = JSON.parse(resultInfo);
                                switch (Number(globalVal.product.productType)) {
                                    case 1:
                                    case 5:
                                        {
                                            if (globalVal.info.location.hash.indexOf('quickTest') > -1 && !globalVal.info.hashArgs.apiID) {
                                                apiUrl = "apiManagementPro/QuickTest/addTestHistory";
                                            } else {
                                                apiUrl = 'apiManagementPro/Test/addTestHistory';
                                            }
                                            break;
                                        }
                                    case 2:
                                        {
                                            location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                                            if (globalVal.info.location.hash.indexOf('quickTest') > -1 && !globalVal.info.hashArgs.apiID) {
                                                apiUrl = globalVal.info.prefixStr + "apiManagementPro/QuickTest/addTestHistory";
                                            } else {
                                                apiUrl = globalVal.info.prefixStr + 'apiManagementPro/Test/addTestHistory';
                                            }
                                        }
                                }
                                var requestData = {
                                    apiProtocol: "0",
                                    URL: resultInfo.requestBody.url,
                                    headers: resultInfo.requestBody.historyHeaders,
                                    requestType: resultInfo.requestBody.params.requestType,
                                    params: resultInfo.requestBody.historyParams,
                                    method: _contentUtils.CONTENT_TOOLS.judgeRequestMethod(requestInfo.requestInfo.apiRequestType),
                                    methodType: requestInfo.requestInfo.apiRequestType
                                };
                                var responseData = {
                                    headers: resultInfo.testResult.headers,
                                    body: resultInfo.testResult.body,
                                    httpCode: resultInfo.testHttpCode,
                                    testDeny: resultInfo.testDeny
                                };
                                $.ajax({
                                    url: location + apiUrl,
                                    method: 'POST',
                                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                    data: {
                                        companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                        spaceKey: globalVal.info.hashArgs.spaceKey,
                                        projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                        apiID: globalVal.info.hashArgs.apiID,
                                        testTime: time,
                                        requestInfo: (0, _stringify2.default)(requestData),
                                        resultInfo: (0, _stringify2.default)(responseData),
                                        beforeInject: requestInfo.script.before,
                                        afterInject: requestInfo.script.after
                                    }
                                }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {});
                            } catch (e) {
                                console.log(e);
                            }
                        }
                    }
                    if (!isProcess) {
                        globalVal.port.normal = chrome.runtime.connect({
                            name: "normalTest"
                        });
                        var data = window.sessionStorage.getItem('plug-normalTest-info') || $("#plug-in-js").text();
                        if (data) {
                            isProcess = true;
                            data = JSON.parse(data);
                            data.commonFunList = globalVal.info.commonFunList;
                            data.productType = globalVal.product.productType;
                            data.oldVersion = globalVal.product.oldVersion;
                            var time = _contentUtils.CONTENT_TOOLS.getTime();
                            globalVal.port.normal.postMessage(data);
                            globalVal.port.normal.onMessage.addListener(function (request, sender, sendResponse) {
                                if (isProcess) {
                                    var webResult = $("#plug-in-result-js");
                                    if (request.statusCode == "210000") {
                                        console.log("请求发送失败，请正确填写接口信息");
                                    }
                                    window.sessionStorage.setItem('plug-background-result', request.backResult);
                                    if (globalVal.product.productType == 0 || globalVal.product.productType == 3) {
                                       
                                        webResult.text(request.backResult);
                                    } else {
                                        webResult.text(1);
                                    }
                                    isProcess = false;
                                    var statusCode = JSON.parse(request.backResult).statusCode;
                                    if (statusCode == "000000" && type != 'share') {
                                        addTestHistory(time, data, request.backResult);
                                    }
                                }
                            });
                        }
                    } else {
                        isProcess = false;
                        globalVal.port.normal.postMessage({
                            stopStatus: true
                        });
                    }
                });
            }
        }
        globalVal.fun.interval = setInterval(clock, 100);
    }
   
    function batchTest() {
       
        initFun();
        var plugDate = {
            responseList: [],
            status: "tested"
        };
        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
        var apiUrl = 'apiManagementPro/TestCase/addTestHistory';
        var isBreak = false;
        switch (Number(globalVal.product.productType)) {
            case 1:
            case 5:
                {
                   
                    apiUrl = 'apiManagementPro/TestCase/addTestHistory';
                    break;
                }
            default:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl = globalVal.info.prefixStr + 'apiManagementPro/TestCase/addTestHistory';
                }
        }
       
        function clock() {
            var data = $('#plug-batch-in-js').text();
            try {
                data = JSON.parse(data);
            } catch (e) {}
            if (data.env) {
                $(document).on('click', '.batch-test-btn', function () {
                    isBreak = false;
                    var btnSend = $('.batch-test-btn');
                    var index = btnSend.index($(this));
                    var webResult = $("#plug-batch-in-result-js");
                   
                    if ($(this).attr('testing') == 'true') {
                       
                        globalVal.port.batch = chrome.runtime.connect({
                            name: "batchTest"
                        });
                       
                        var content = JSON.parse($('#plug-batch-in-js').text());
                        var data = {};
                        if (index == 0) {
                           
                            data = content;
                        } else {
                            data.caseList = [content.caseList[index - 1]];
                            data.env = content.env;
                        }
                        data.commonFunList = globalVal.info.commonFunList;
                        data.index = index;
                        data.amount = content.caseList.length;
                        data.productType = globalVal.product.productType;
                        data.oldVersion = globalVal.product.oldVersion;
                        globalVal.port.batch.postMessage(data);
                        globalVal.port.batch.onMessage.addListener(function (backResult) {
                            for (i = 0; i < content.caseList.length; i++) {
                                if (backResult.responseList[i] != null) {} else {
                                    backResult.responseList[i] = null;
                                }
                            }
                            if (index == 0) {
                               
                                for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                    if (backResult.responseList[i] == null) {
                                        backResult.status = 'testing';
                                    }
                                }
                                window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                plugDate = {
                                    responseList: [],
                                    status: backResult.status
                                };
                                webResult.text((0, _stringify2.default)(plugDate));
                                plugDate = {
                                    responseList: [],
                                    status: "tested"
                                };
                            } else {
                               
                                plugDate.responseList[index - 1] = backResult.responseList[index - 1];
                                for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                    if (!plugDate.responseList[i]) {
                                        plugDate.responseList[i] = null;
                                    }
                                }
                                window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                plugDate = {
                                    responseList: [],
                                    status: backResult.status
                                };
                                webResult.text((0, _stringify2.default)(plugDate));
                            }
                            if (backResult.status == 'tested' && !isBreak) {
                                var result = [];
                                if (index == 0) {
                                    content.caseList.forEach(function (val, key) {
                                        result.push({
                                            caseID: val.caseID,
                                            result: backResult.responseList[key]
                                        });
                                    });
                                } else {
                                    result = [{
                                        caseID: content.caseList[index - 1].caseID,
                                        result: backResult.responseList[index - 1]
                                    }];
                                }
                                $.ajax({
                                    url: location + apiUrl,
                                    method: 'POST',
                                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                    data: {
                                        companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                        spaceKey: globalVal.info.hashArgs.spaceKey,
                                        projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                        apiID: globalVal.info.hashArgs.apiID,
                                        result: (0, _stringify2.default)(result)
                                    }
                                }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {});
                            }
                        });
                    } else {
                        isBreak = true;
                        globalVal.port.batch.postMessage({
                            index: index,
                            stopStatus: true
                        });
                       
                    };
                });
                window.clearInterval(globalVal.fun.interval);
            }
        }
        globalVal.fun.interval = setInterval(clock, 100);
    }
   
    function autoTest() {
       
        initFun();
        var plugDate = {
            responseList: [],
            status: "tested"
        };
        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
        var apiUrl = 'automatedTest/AutomatedTestCaseSingle/getSingleCaseList';
        var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
        var content = {};
        var beforeCaseList = false;
        var changeFlagePrevious = 0;
        var isBreak = false;
        switch (Number(globalVal.product.productType)) {
            case 1:
            case 5:
                {
                   
                    apiUrl = 'automatedTest/AutomatedTestCaseSingle/getSingleCaseList';
                    apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                    break;
                }
            case 0:
                {
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                    apiUrl = 'server/index.php?g=Web&c=AutomatedTestCaseSingle&o=getSingleTestCaseList';
                    break;
                }
            case 3:
                {
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.html$/i, '');
                    apiUrl = 'AutomatedTestCaseSingle/getSingleTestCaseList';
                    break;
                }
            default:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl = globalVal.info.prefixStr + 'automatedTest/AutomatedTestCaseSingle/getSingleCaseList';
                    apiUrl1 = globalVal.info.prefixStr + 'automatedTest/AutomatedTestHistory/addTestLog';
                }
        }

        function getSingleCaseList() {
           
            $.ajax({
                url: location + apiUrl,
                method: 'POST',
                contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                data: {
                    companyHashKey: globalVal.info.hashArgs.companyHashKey,
                    spaceKey: globalVal.info.hashArgs.spaceKey,
                    projectHashKey: globalVal.info.hashArgs.projectHashKey,
                    caseID: globalVal.info.hashArgs.caseID,
                    projectID: globalVal.info.hashArgs.projectID
                }
            }).done(function (successData, textStatus, xhr) {
                try {
                    content = JSON.parse(successData);
                } catch (e) {
                    content = successData;
                }
            }).fail(function (xhr, textStatus) {});
        }
        getSingleCaseList();

        function queryBtn() {
            function query() {
                var btnSend = $('button.batch-test-btn');
               
                $('#automated-text').unbind('DOMCharacterDataModified');

                try {
                    changeFlagePrevious = JSON.parse($("#automated-text").text()).flag;
                } catch (e) {}
                $('#automated-text').bind('DOMCharacterDataModified', function (e) {
                    var webContent = JSON.parse($("#automated-text").text());
                    if (changeFlagePrevious != webContent.flag) {
                        getSingleCaseList();
                        changeFlagePrevious = webContent.flag;
                    }
                });
                if (content != undefined && content.singCaseList != undefined && content.singCaseList.length == btnSend.length - 1) {
                    clearInterval(globalVal.fun.interval);
                   
                    $('.batch-test-btn').off('click');
                    $(document).on('click', '.batch-test-btn', function () {
                        var btnSend = $('.batch-test-btn');
                        var webResult = $('#plug-batch-in-result-js');
                        var index = btnSend.index($(this));
                        var caseList = {};
                        var env = JSON.parse($("#automated-text").text()).env;
                       
                        if ($(this).attr('testing') == 'true') {
                            isBreak = false;
                            globalVal.port.auto = chrome.runtime.connect({
                                name: "autoTest"
                            });
                           
                            var data = {};
                            if (index == 0) {
                               
                                caseList.caseData = content.singCaseList;
                            } else {
                                caseList.caseData = [content.singCaseList[index - 1]];
                            }
                            caseList.productType = globalVal.product.productType;
                            caseList.oldVersion = globalVal.product.oldVersion;
                            caseList.beforeCase = {
                                caseCodeList: content.beforeCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            };
                            caseList.afterCase = {
                                caseCodeList: content.afterCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            };
                            caseList.location = location;
                            caseList.index = index;
                            caseList.amount = content.singCaseList.length;
                            caseList.env = env;
                            caseList.commonFunList = globalVal.info.commonFunList;
                            globalVal.port.auto.postMessage(caseList);
                            globalVal.port.auto.onMessage.addListener(function (backResult) {
                                if (backResult.afterCaseReportList.length == 0) {
                                   
                                    for (i = 0; i < content.singCaseList.length; i++) {
                                        if (backResult.responseList[i] != null) {} else {
                                            backResult.responseList[i] = null;
                                        }
                                    }
                                }
                                if (!content.afterCaseList) {
                                    content.afterCaseList = [];
                                }
                                if (index == 0) {
                                    if (content.afterCaseList.length == 0) {
                                        for (var i = 0; i < backResult.responseList.length; i++) {
                                           
                                           
                                            if (backResult.responseList[i] == null) {
                                                backResult.status = 'testing';
                                            } else if (backResult.responseList[i].isStopTest) {
                                                backResult.status = 'tested';
                                                break;
                                            }
                                        }
                                    } else {
                                       
                                        if (backResult.afterCaseReportList.length != content.afterCaseList.length) {
                                            backResult.status = 'testing';
                                        }
                                    }
                                    window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                    plugDate = {
                                        responseList: [],
                                        status: backResult.status
                                    };
                                    webResult.text((0, _stringify2.default)(plugDate));
                                    plugDate = {
                                        responseList: [],
                                        status: "tested"
                                    };
                                } else {
                                    if (content.afterCaseList.length == 0) {
                                       
                                       
                                        if (backResult.responseList[index - 1] == null) {
                                            backResult.status = 'testing';
                                        }
                                    } else {
                                       
                                        if (backResult.afterCaseReportList.length != content.afterCaseList.length) {
                                            backResult.status = 'testing';
                                        }
                                    }
                                   
                                    plugDate.responseList[index - 1] = backResult.responseList[index - 1];
                                    for (var i = backResult.responseList.length - 1; i >= 0; i--) {
                                        if (!plugDate.responseList[i]) {
                                            plugDate.responseList[i] = null;
                                        }
                                    }
                                    window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                    plugDate = {
                                        responseList: [],
                                        status: backResult.status
                                    };
                                    webResult.text((0, _stringify2.default)(plugDate));
                                }
                                if (!isBreak && (globalVal.product.productType == 1 || globalVal.product.productType == 5 || globalVal.product.productType == 2) && backResult.status == 'tested' && index == 0) {
                                   
                                    isBreak = true;
                                    $.ajax({
                                        url: location + apiUrl1,
                                        method: 'POST',
                                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                        data: {
                                            caseID: globalVal.info.hashArgs.caseID,
                                            companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                            spaceKey: globalVal.info.hashArgs.spaceKey,
                                            projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                            result: (0, _stringify2.default)(backResult)
                                        }
                                    }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                        isBreak = false;
                                        console.log('Add History Fail');
                                    });
                                }
                            });
                        } else {
                            isBreak = true;
                            globalVal.port.auto.postMessage({
                                index: index,
                                stopStatus: true
                            });
                        }
                    });
                }
            }
            globalVal.fun.interval = setInterval(query, 500);
        }
        queryBtn();
    }
   
    function autoCodeTest() {
       
        initFun();
        var plugDate = {
            responseList: [],
            status: "tested"
        };
        var content = {};
        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
        var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
        var isBreak = false;
        switch (Number(globalVal.product.productType)) {
            case 1:
            case 5:
                {
                   
                    apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestLog';
                    break;
                }
            case 0:
                {
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                    break;
                }
            case 2:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl1 = globalVal.info.prefixStr + 'automatedTest/AutomatedTestHistory/addTestLog';
                    break;
                }
        }
       
        function queryBtn() {
            function query() {
                var btnSend = $('button.batch-test-btn');
                if (btnSend.length != 0) {
                    clearInterval(globalVal.fun.interval);
                    $('.batch-test-btn').off('click');
                   
                    $('.batch-test-btn').on('click', function () {
                        isBreak = false;
                        var content = window.sessionStorage.getItem('plug-autoTest-code');
                        var btnSend = $('.batch-test-btn');
                        var caseCodeList = {};
                        var webResult = $("#plug-batch-in-result-js");
                        content = JSON.parse(content);
                       
                        if ($(this).attr('testing') == 'true') {
                            globalVal.port.autoCode = chrome.runtime.connect({
                                name: "autoCodeTest"
                            });
                           
                            caseCodeList.caseCode = content.caseCode;
                            caseCodeList.beforeCase = {
                                caseCodeList: content.beforeCaseList || false,
                                env: content.env,
                                commonFunList: globalVal.info.commonFunList,
                                oldVersion: globalVal.product.oldVersion

                            };
                            caseCodeList.afterCase = {
                                caseCodeList: content.afterCaseList || false,
                                env: content.env,
                                commonFunList: globalVal.info.commonFunList,
                                oldVersion: globalVal.product.oldVersion
                            };
                            caseCodeList.productType = globalVal.product.productType;
                            caseCodeList.oldVersion = globalVal.product.oldVersion;
                            caseCodeList.env = content.env;
                            caseCodeList.commonFunList = globalVal.info.commonFunList;
                            globalVal.port.autoCode.postMessage(caseCodeList);
                            globalVal.port.autoCode.onMessage.addListener(function (backResult) {
                                window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(backResult));
                                plugDate = {
                                    status: 'tested'
                                };
                                webResult.text((0, _stringify2.default)(plugDate));
                                if (!isBreak && (globalVal.product.productType == 1 || globalVal.product.productType == 5 || globalVal.product.productType == 2) && globalVal.info.location.hash.indexOf('proInside/test/admin/mode/advanced') > -1 || globalVal.info.location.hash.indexOf('automatic/inside/cenario/mode/advanced') > -1) {
                                    isBreak = true;
                                    $.ajax({
                                        url: location + apiUrl1,
                                        method: 'POST',
                                        contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                        data: {
                                            caseID: globalVal.info.hashArgs.caseID,
                                            companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                            spaceKey: globalVal.info.hashArgs.spaceKey,
                                            projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                            result: (0, _stringify2.default)(backResult)
                                        }
                                    }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                        isBreak = false;
                                        console.log('Add History Fail');
                                    });
                                }
                            });
                        } else {
                           
                            isBreak = true;
                            globalVal.port.autoCode.postMessage({
                                stopStatus: true
                            });
                        }
                    });
                }
            }
            globalVal.fun.interval = setInterval(query, 500);
        }
        queryBtn();
    }
   
    function batchAutoTest() {
        initFun();
        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
        var apiUrl = 'automatedTest/AutomatedTestCase/getTestCaseList';
        var apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestHistory';
        var apiUrl2 = 'automatedTest/AutomatedTestHistory/addTestLog';
        var content = null;
        var changeFlagePrevious = 1;
        var ajaxStatus = false;
        switch (Number(globalVal.product.productType)) {
            case 1:
            case 5:
                {
                   
                    apiUrl = 'automatedTest/AutomatedTestCase/getTestCaseDataList';
                    apiUrl1 = 'automatedTest/AutomatedTestHistory/addTestHistory';
                    break;
                }
            case 0:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.php$/i, '');
                    apiUrl = 'server/index.php?g=Web&c=AutomatedTestCase&o=getTestCaseDataList';
                    break;
                }
            case 3:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/index\.html$/i, '');
                    apiUrl = 'AutomatedTestCase/getTestCaseDataList';
                    break;
                }
            default:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    apiUrl = globalVal.info.prefixStr + 'automatedTest/AutomatedTestCase/getTestCaseDataList';
                    apiUrl2 = globalVal.info.prefixStr + 'automatedTest/AutomatedTestHistory/addTestLog';
                    apiUrl1 = globalVal.info.prefixStr + 'automatedTest/AutomatedTestHistory/addTestHistory';
                }
        }

        function getBatchData(which, data, index, env) {
            switch (which.toString()) {
                case '0':
                    {
                       
                        return {
                            caseData: data.singleCaseList,
                            productType: globalVal.product.productType,
                            oldVersion: globalVal.product.oldVersion,
                            index: 0,
                            batchIndex: index,
                            location: location,
                            amount: data.singleCaseList.length,
                            env: env,
                            commonFunList: globalVal.info.commonFunList,
                            beforeCase: {
                                caseCodeList: data.beforeCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            },
                            afterCase: {
                                caseCodeList: data.afterCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            }
                        };
                        break;
                    }
                default:
                    {
                        return {
                            caseCode: data.caseCode,
                            productType: globalVal.product.productType,
                            oldVersion: globalVal.product.oldVersion,
                            env: env,
                            batchIndex: index,
                            commonFunList: globalVal.info.commonFunList,
                            beforeCase: {
                                caseCodeList: data.beforeCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            },
                            afterCase: {
                                caseCodeList: data.afterCaseList || false,
                                env: env,
                                commonFunList: globalVal.info.commonFunList,
                                productType: globalVal.product.productType,
                                oldVersion: globalVal.product.oldVersion
                            }
                        };
                    }
            }
        }

        function getBatchAutoTest(orderBy, asc, connID, condition, keyWord) {
            content = null;
            var request = {
                companyHashKey: globalVal.info.hashArgs.companyHashKey,
                spaceKey: globalVal.info.hashArgs.spaceKey,
                projectHashKey: globalVal.info.hashArgs.projectHashKey,
                projectID: globalVal.info.hashArgs.projectID,
                orderBy: orderBy,
                asc: asc,
                keyWord: keyWord,
                condition: condition,
                connID: connID || null,
                groupID: -1
            };
            request.groupID = globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID'];
            $.ajax({
                url: location + apiUrl,
                method: 'POST',
                contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                data: request
            }).done(function (successData, textStatus, xhr) {
                try {
                    successData = JSON.parse(successData);
                } catch (e) {}
                if (successData.statusCode == '000000') {
                    try {
                        content = JSON.parse(successData).caseList;
                    } catch (e) {
                        content = successData.caseList;
                    }
                } else {
                    content = [];
                }
            }).fail(function (xhr, textStatus) {});
        }
        var report = {
            time: '0ms',
            totalCase: 0,
            successCase: 0,
            errorCase: 0,
            responseList: [],
            status: 'testing'
        };
        var data = {
            time: {
                init: null
            }
        };
        var fun = {};
        var isBreak = false;

        fun.queryDate = function () {
            function query1() {
                if ($("#automated-text").text()) {
                    try {
                        var webContent = JSON.parse($("#automated-text").text());
                        webContent.filter = webContent.filter || {};
                        clearInterval(globalVal.fun.interval1);
                        getBatchAutoTest(webContent.filter.orderBy, webContent.filter.asc, webContent.filter.connID, webContent.filter.condition, webContent.filter.search);
                    } catch (e) {}
                }
            }
            globalVal.fun.interval1 = setInterval(query1, 500);
        };
        fun.queryDate();

        function queryBtn() {
            function query() {
                var btnSend = $('button.batch-test-btn');
                var patt = /home\/project\/inside\/test\/default\?/i;
               
                var filterContent = null;
                if (content !== null) {
                    filterContent = (0, _assign2.default)([], content);
                }
                $('#automated-text').unbind('DOMCharacterDataModified');
                try {
                    changeFlagePrevious = JSON.parse($("#automated-text").text()).flag;
                } catch (e) {}
                $('#automated-text').bind('DOMCharacterDataModified', function (e) {
                    var webContent = JSON.parse($("#automated-text").text());
                    if (content !== null) {
                        filterContent = [];
                    } else {
                        filterContent = null;
                    }
                    webContent.filter = webContent.filter || {};
                    if (changeFlagePrevious != webContent.flag) {
                        getBatchAutoTest(webContent.filter.orderBy, webContent.filter.asc, webContent.filter.connID, webContent.filter.condition, webContent.filter.search);
                        queryBtn();
                        changeFlagePrevious = webContent.flag;
                    } else if (webContent.filter.search) {
                        content.forEach(function (val, key) {
                            if (val.caseName.indexOf(webContent.filter.search) > -1) {
                                filterContent.push(val);
                            }
                        });
                    } else {
                        filterContent = (0, _assign2.default)([], content);
                    }
                });
                fun.removeListener = function (callback) {
                    if (callback) {
                        globalVal.port.autoCode.onMessage.removeListener(callback);
                        globalVal.port.auto.onMessage.removeListener(callback);
                    }
                };
                if (filterContent != null && filterContent.length == btnSend.length - 2 || filterContent != null && patt.test(globalVal.info.location.href) && btnSend.length == 1) {
                    clearInterval(globalVal.fun.interval);
                   
                    $('.batch-test-btn').off('click');
                    $('.batch-test-btn').on('click', function () {
                        var webResult = $("#plug-batch-in-result-js");
                        if ($(this).attr('testing') == 'true') {
                            var index = $('button.batch-test-btn').index($(this));
                           
                            var index1 = $('a.batch-test-btn').index($(this));
                            var isAsync = true;
                           
                            if (index == 0 || index1 == 1 || globalVal.product.productType == 0) {
                               
                                isAsync = true;
                            } else {
                                isAsync = false;
                            }
                            if (index == 1 || index == -1) {
                                index = 0;
                            }
                            isBreak = false;
                            report = {
                                time: '0ms',
                                totalCase: 0,
                                successCase: 0,
                                errorCase: 0,
                                responseList: [],
                                status: 'testing'
                            };
                            var plugDate = {
                                responseList: [],
                                status: "testing"
                            };
                            var env = {};
                            try {
                                env = JSON.parse($("#automated-text").text()).env;
                            } catch (e) {}
                            report.totalCase = filterContent.length;
                            globalVal.port.autoCode = chrome.runtime.connect({
                                name: "autoCodeTest"
                            });
                            globalVal.port.auto = chrome.runtime.connect({
                                name: "autoTest"
                            });
                            report.responseList = new Array(report.totalCase);
                            data.time.init = new Date();
                            var batchList = [];
                            if (index == 0) {
                                batchList = filterContent;
                            } else {
                                batchList.push(filterContent[index - 2]);
                            }
                            switch (isAsync) {
                                case false:
                                    {
                                       
                                        var asyncControl = function () {
                                            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                                var i;
                                                return _regenerator2.default.wrap(function _callee$(_context) {
                                                    while (1) {
                                                        switch (_context.prev = _context.next) {
                                                            case 0:
                                                                i = 0;

                                                            case 1:
                                                                if (!(i < batchList.length)) {
                                                                    _context.next = 9;
                                                                    break;
                                                                }

                                                                if (!isBreak) {
                                                                    _context.next = 4;
                                                                    break;
                                                                }

                                                                return _context.abrupt('break', 9);

                                                            case 4:
                                                                _context.next = 6;
                                                                return Synchronization(batchList, i);

                                                            case 6:
                                                                i++;
                                                                _context.next = 1;
                                                                break;

                                                            case 9:
                                                            case 'end':
                                                                return _context.stop();
                                                        }
                                                    }
                                                }, _callee, this);
                                            }));

                                            return function asyncControl() {
                                                return _ref.apply(this, arguments);
                                            };
                                        }();

                                        var Synchronization = function Synchronization(batchList, i) {
                                            return new _promise2.default(function (resolve, reject) {
                                                switch (batchList[i].caseType.toString()) {
                                                    case '1':
                                                        {
                                                           
                                                            var caseCodeList = getBatchData('1', batchList[i], i, env);
                                                            globalVal.port.autoCode.postMessage(caseCodeList);
                                                            break;
                                                        }
                                                    case '0':
                                                        {
                                                           
                                                            var caseList = getBatchData('0', batchList[i], i, env);
                                                            globalVal.port.auto.postMessage(caseList);
                                                            break;
                                                        }
                                                }
                                               
                                                fun.removeListener(fun.callback);
                                                fun.callback = function (backResult) {
                                                    if (!isBreak) {
                                                        var isEnd = true;
                                                        if (index == 0) {
                                                            report.time = (new Date() - data.time.init) / 1000 + 's';
                                                            backResult.caseName = filterContent[backResult.batchIndex].caseName;
                                                            backResult.caseID = filterContent[backResult.batchIndex].caseID;
                                                            backResult.caseType = filterContent[backResult.batchIndex].caseType;
                                                            report.responseList[backResult.batchIndex] = backResult;
                                                           
                                                            for (i = 0; i < filterContent.length; i++) {
                                                                if (report.responseList[i] != null) {} else {
                                                                    report.responseList[i] = null;
                                                                }
                                                            }
                                                            for (var i = 0; i < report.responseList.length; i++) {
                                                               
                                                                if (report.responseList[i] == null) {
                                                                    isEnd = false;
                                                                }
                                                            }
                                                            if (isEnd == true) {
                                                                plugDate.status = 'tested';
                                                                report.status = 'tested';
                                                            }
                                                            if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                                report.successCase++;
                                                            } else {
                                                                report.errorCase++;
                                                            }
                                                            window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                            webResult.text((0, _stringify2.default)(plugDate));
                                                            resolve('success');
                                                            var patt = /home\/project\/inside\/test\/default\?/i;
                                                            if (isEnd == true && (globalVal.product.productType == 1 || globalVal.product.productType == 5 || globalVal.product.productType == 2) && !patt.test(globalVal.info.location.href)) {
                                                                $.ajax({
                                                                    url: location + apiUrl1,
                                                                    method: 'POST',
                                                                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                                    data: {
                                                                        companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                        spaceKey: globalVal.info.hashArgs.spaceKey,
                                                                        projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                        result: (0, _stringify2.default)(report),
                                                                        groupID: globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID']

                                                                    }
                                                                }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                                    console.log('Add History Fail');
                                                                });
                                                            }
                                                        } else {
                                                            report.time = (new Date() - data.time.init) / 1000 + 's';
                                                            report.responseList = [backResult];
                                                            report.status = 'tested';
                                                            if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                                report.successCase++;
                                                            } else {
                                                                report.errorCase++;
                                                            }
                                                            window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                            plugDate.status = 'tested';
                                                            webResult.text((0, _stringify2.default)(plugDate));
                                                            resolve('success');
                                                           
                                                            if (globalVal.product.productType == 1 || globalVal.product.productType == 2 || globalVal.product.productType == 5) {
                                                                $.ajax({
                                                                    url: location + apiUrl2,
                                                                    method: 'POST',
                                                                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                                    data: {
                                                                        caseID: batchList[0].caseID,
                                                                        companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                        spaceKey: globalVal.info.hashArgs.spaceKey,
                                                                        projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                        result: (0, _stringify2.default)(backResult)
                                                                    }
                                                                }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                                    console.log('Add History Fail');
                                                                });
                                                            }
                                                        }
                                                    }
                                                };
                                                globalVal.port.autoCode.onMessage.addListener(fun.callback);
                                                globalVal.port.auto.onMessage.addListener(fun.callback);
                                            });
                                        };

                                        asyncControl().then(function () {}).catch(function (e) {
                                            console.log(e);
                                        });
                                        break;
                                    }
                                default:
                                    {
                                       
                                        for (var i = 0; i < batchList.length; i++) {
                                            if (isBreak) break;
                                            switch (batchList[i].caseType.toString()) {
                                                case '1':
                                                    {
                                                       
                                                        var caseCodeList = getBatchData('1', batchList[i], i, env);
                                                        globalVal.port.autoCode.postMessage(caseCodeList);
                                                        break;
                                                    }
                                                case '0':
                                                    {
                                                       
                                                        var caseList = getBatchData('0', batchList[i], i, env);
                                                        globalVal.port.auto.postMessage(caseList);
                                                        break;
                                                    }
                                            }
                                        }
                                        fun.removeListener(fun.callback);
                                        fun.callback = function (backResult) {
                                            if (!isBreak) {
                                                if (index == 0) {
                                                    report.time = (new Date() - data.time.init) / 1000 + 's';
                                                    backResult.caseName = filterContent[backResult.batchIndex].caseName;
                                                    backResult.caseID = filterContent[backResult.batchIndex].caseID;
                                                    backResult.caseType = filterContent[backResult.batchIndex].caseType;
                                                    report.responseList[backResult.batchIndex] = backResult;
                                                    var isEnd = true;
                                                   
                                                    for (i = 0; i < filterContent.length; i++) {
                                                        if (report.responseList[i] != null) {} else {
                                                            report.responseList[i] = null;
                                                        }
                                                    }
                                                    for (var i = 0; i < report.responseList.length; i++) {
                                                       
                                                        if (report.responseList[i] == null) {
                                                            isEnd = false;
                                                        }
                                                    }
                                                    if (isEnd == true) {
                                                        plugDate.status = 'tested';
                                                        report.status = 'tested';
                                                    }
                                                    if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                        report.successCase++;
                                                    } else {
                                                        report.errorCase++;
                                                    }
                                                    window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                    webResult.text((0, _stringify2.default)(plugDate));
                                                    var patt = /home\/project\/inside\/test\/default\?/i;
                                                    if (isEnd == true && (globalVal.product.productType == 1 || globalVal.product.productType == 2 || globalVal.product.productType == 5) && !patt.test(globalVal.info.location.href)) {
                                                        $.ajax({
                                                            url: location + apiUrl1,
                                                            method: 'POST',
                                                            contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
                                                            data: {
                                                                companyHashKey: globalVal.info.hashArgs.companyHashKey,
                                                                spaceKey: globalVal.info.hashArgs.spaceKey,
                                                                projectHashKey: globalVal.info.hashArgs.projectHashKey,
                                                                result: (0, _stringify2.default)(report),
                                                                groupID: globalVal.info.hashArgs['grandSonGroupID'] != undefined ? globalVal.info.hashArgs['grandSonGroupID'] : globalVal.info.hashArgs['childGroupID'] != undefined ? globalVal.info.hashArgs['childGroupID'] : globalVal.info.hashArgs['groupID'] == undefined ? 0 : globalVal.info.hashArgs['groupID'] == -1 ? 0 : globalVal.info.hashArgs['groupID']

                                                            }
                                                        }).done(function (successData, textStatus, xhr) {}).fail(function (xhr, textStatus) {
                                                            console.log('Add History Fail');
                                                        });
                                                    }
                                                } else {
                                                    report.time = (new Date() - data.time.init) / 1000 + 's';
                                                    report.responseList = [backResult];
                                                    report.status = 'tested';
                                                    if (backResult.reportStatus == 'finish' || backResult.status == 'finish') {
                                                        report.successCase++;
                                                    } else {
                                                        report.errorCase++;
                                                    }
                                                    window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                                                    plugDate.status = 'tested';
                                                    webResult.text((0, _stringify2.default)(plugDate));
                                                }
                                            }
                                        };
                                        globalVal.port.autoCode.onMessage.addListener(fun.callback);
                                        globalVal.port.auto.onMessage.addListener(fun.callback);
                                    }
                            }
                        } else {
                            fun.removeListener(fun.callback);
                            isBreak = true;
                           
                            report.time = (new Date() - data.time.init) / 1000 + 's';
                            report.status = 'tested';
                            window.sessionStorage.setItem('plug-background-result', (0, _stringify2.default)(report));
                            globalVal.port.autoCode.postMessage({
                                stopStatus: true
                            });
                            globalVal.port.auto.postMessage({
                                index: 0,
                                stopStatus: true
                            });
                        }
                    });
                }
            }
            globalVal.fun.interval = setInterval(query, 500);
        }
        queryBtn();
    }

    function getFunctionDataList() {
        var apiUrl = null;
        var location = globalVal.info.location.origin + globalVal.info.location.pathname;
        switch (Number(globalVal.product.productType)) {
            case 1:
                {
                   
                    if (/\/share\/project\/test/i.test(globalVal.info.location.href)) {
                        apiUrl = 'apiManagementPro/Share/getFunctionDataList';
                    } else if (/(\/automatic\/inside\/cenario)|(\/automatic\/inside\/scene)/i.test(globalVal.info.location.href)) {
                        apiUrl = 'automatedTest/CommonFunction/getFunctionDataList';
                    } else {
                        apiUrl = 'apiManagementPro/CommonFunction/getFunctionDataList';
                    }
                    break;
                }
            case 2:
                {
                   
                    location = globalVal.info.location.origin + globalVal.info.location.pathname.replace(/independent\/$/i, '');
                    if (/\/share\/project\/test/i.test(globalVal.info.location.href)) {
                        apiUrl = globalVal.info.prefixStr + 'apiManagementPro/Share/getFunctionDataList';
                    } else if (/(\/automatic\/inside\/cenario)|(\/automatic\/inside\/scene)/i.test(globalVal.info.location.href)) {
                        apiUrl = globalVal.info.prefixStr + 'automatedTest/CommonFunction/getFunctionDataList';
                    } else {
                        apiUrl = globalVal.info.prefixStr + 'apiManagementPro/CommonFunction/getFunctionDataList';
                    }
                    break;
                }
            default:
                {
                    return;
                }
        }
        var request = {
            companyHashKey: globalVal.info.hashArgs.companyHashKey,
            spaceKey: globalVal.info.hashArgs.spaceKey,
            projectHashKey: globalVal.info.hashArgs.projectHashKey,
            shareCode: globalVal.info.hashArgs.shareCode,
            shareID: globalVal.info.hashArgs.shareID
        };
        $.ajax({
            url: location + apiUrl,
            method: 'POST',
            contentType: 'application/x-www-form-urlencoded;charset=UTF-8',
            data: request
        }).done(function (successData, textStatus, xhr) {
            try {
                successData = JSON.parse(successData);
            } catch (e) {}
            if (successData.statusCode == '000000') {
                try {
                    globalVal.info.commonFunList = JSON.parse(successData).functionList;
                } catch (e) {
                    globalVal.info.commonFunList = successData.functionList;
                }
            } else {
                globalVal.info.commonFunList = [];
            }
        }).fail(function (xhr, textStatus) {});
    }
    InitState();
    window.onhashchange = InitState;
});

/***/ }),

/***/ 131:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var CONTENT_TOOLS = exports.CONTENT_TOOLS = {
    judgeRequestMethod: function judgeRequestMethod(methodId) {
        var method = "POST";
        switch (methodId.toString()) {
            case '1':
                method = "GET";
                break;
            case '2':
                method = "PUT";
                break;
            case '3':
                method = "DELETE";
                break;
            case '4':
                method = "HEAD";
                break;
            case '5':
                method = "OPTIONS";
                break;
            case '6':
                method = "PATCH";
                break;
            default:
                method = "POST";
        }
        return method;
    },
    getHashStringArgs: function getHashStringArgs() {
        var hashStrings = [],
            hashArgs = {};
        var items = [],
            item = null,
            name = null,
            value = null,
            i = 0,
            len = 0;
        hashStrings = window.location.hash;
        if (hashStrings.indexOf('?') > -1) {
            items = hashStrings.split("?");
            items = items[1].split("&");
            len = items.length;
            for (i = 0; i < len; i++) {
                item = items[i].split("=");
                name = decodeURIComponent(item[0]);
                value = decodeURIComponent(item[1]);
                if (name.length > 0) {
                    hashArgs[name] = value;
                }
            }
        }
        return hashArgs;
    },
    getVersison: function getVersison() {
        var meta = false;
        try {
            meta = $('meta[name="version"]')[0].content;
        } catch (e) {
           
        }
        if (meta) {
           
           
           
           
           
            return meta;
        } else {
            return false;
        }
    },
    judgePlatform: function judgePlatform() {
       
        var meta = false;
        try {
            meta = $('meta[name="product-type"]')[0].content;
        } catch (e) {
           
        }
        if (meta) {
           
           
           
           
            return meta;
        } else {
            return false;
        }
    },
    getTime: function getTime() {
        var data = {
            fun: {
                getTime: null
            }
        };
        data.fun.getTime = function () {
            var template = {
                info: {
                    date: new Date(),
                    time: {
                        year: null,
                        month: null,
                        day: null,
                        hour: null,
                        minute: null,
                        second: null
                    },
                    string: null
                }
            };
            template.info.time.year = template.info.date.getFullYear();
            template.info.time.month = template.info.date.getMonth() + 1;
            template.info.time.day = template.info.date.getDate();

            template.info.time.hour = template.info.date.getHours();
            template.info.time.minute = template.info.date.getMinutes();
            template.info.time.second = template.info.date.getSeconds();

            template.info.string = template.info.time.year + "-";

            if (template.info.time.month < 10) template.info.string += "0";

            template.info.string += template.info.time.month + "-";

            if (template.info.time.day < 10) template.info.string += "0";

            template.info.string += template.info.time.day + " ";

            if (template.info.time.hour < 10) template.info.string += "0";

            template.info.string += template.info.time.hour + ":";
            if (template.info.time.minute < 10) template.info.string += '0';
            template.info.string += template.info.time.minute + ":";
            if (template.info.time.second < 10) template.info.string += '0';
            template.info.string += template.info.time.second;
            return template.info.string;
        };
        return data.fun.getTime();
    },
    judgeWhichTest: function judgeWhichTest(productType) {
       
        var version = CONTENT_TOOLS.getVersison();
        var nowUrl = window.location.href;
        var patt1 = /(\/api\/test)|(\/quickTest)/i,
           
        patt2 = /\/api\/case/i,
           
        patt3 = /(\/test\/api)|(\/test\/admin\/api)|(\/cenario\/api)|(\/scene\/api)/i,
           
        patt4 = /(\/test\/mode\/advanced)|(\/test\/admin\/mode\/advanced)|(cenario\/mode\/advanced)|(scene\/mode\/advanced)/i,
           
        patt5 = /(\/test\/admin\/\?)|(\/inside\/test\/default\?)|(\/automatic\/inside\/cenario\/\?)|(\/automatic\/inside\/scene\/\?)/i,
           
        patt6 = /(\/test\/admin\/mode\/env)|(cenario\/mode\/env)|(scene\/mode\/env)/i,
           
        patt7 = /\/share\/project\/test/i;
        var status1 = patt1.test(nowUrl),
            status2 = patt2.test(nowUrl),
            status3 = patt3.test(nowUrl),
            status4 = patt4.test(nowUrl),
            status5 = patt5.test(nowUrl),
            status6 = patt6.test(nowUrl),
            status7 = patt7.test(nowUrl);
        if (status1) {
            return 'normal';
        } else if (status2) {
            return 'case';
        } else if (status3) {
            return 'auto';
        } else if (status4) {
            return 'autoCode';
        } else if (status5) {
            return 'autoBatch';
        } else if (status6) {
            return 'envCase';
        } else if (status7) {
            return 'share';
        }
    }
};

/***/ })

},[130]);